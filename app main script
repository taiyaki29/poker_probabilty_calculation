using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using System.Linq;

public class cardcontroller : MonoBehaviour
{
    //declare variables
    #region
    GameObject clickedGameObject;
    public GameObject hand1;
    public GameObject hand2;
    public GameObject board1;
    public GameObject board2;
    public GameObject board3;
    public GameObject board4;
    public GameObject board5;
    public GameObject canvas;
    public GameObject errorcanvas;
    public GameObject errorcanvas2;
    public GameObject mainresult;
    public GameObject preflopresult;
    public GameObject chosen;
    public GameObject mywinningChance;
    public GameObject mytieChance;
    public GameObject mylosingChance;
    public GameObject opwinningChance;
    public GameObject optieChance;
    public GameObject oplosingChance;
    public Sprite[] sprites;
    public Text playernumbertext;
    public Text[] prefloptexts;

    Text atext;                          // initial text also used after input
    Text btext;                          // text after input 
    Image aimage;                        //initial image also used after inout
    Image bimage;                        //image after input
    Image current_image;                 //for moving to next card
    Text curret_text;                    //for moving to next card
    Sprite asprite;                      //initial sprite
    int[] card =new int[9];              //check which cards are used     ace of spade is 1, 2 of spade is 2,,,, 3 of diamond is (3+13)=16,,,,
    int[] resultNo =new int[15];         // (1 is resultNo[1], will use for 12345 srtaight) , 2 is resultNo[2],,,13 is resultNo[13],1is also resultNo[14], 
    int[] resultSmbl =new int[4];        //0 is Spades, 1 is Diamonds, 2 is Clubs, 3 is Hearts
    int[] myhandcount = new int[9];      //number of each hand
    int cardno;                          //number of card hand1 is 1, hand2 is 2, board1 is 3,,,,,opponent1 is 7, opponent2 is 8 
    int myscore =0;                      //scoring my hand for comparison ex.pair is 100000
    int opscore =0;                      //same but for opponent
    int numberOpponentWinningHands = 0;  //number of hands the opponent won
    int numberOfDraws = 0;               //number of smae hands
    int playerNumber = 2;                //player number
    
    #endregion

    // initialize and update
    #region
    void Start()
    {
        setAlltoBlanck();
        setInitialCanvas();
    }
    void Update()
    {   
       if (Input.GetMouseButtonDown(0))
       {
          Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
          RaycastHit2D hit2d = Physics2D.Raycast((Vector2)ray.origin, (Vector2)ray.direction);
          if (hit2d)
          {
              clickedGameObject = hit2d.transform.gameObject;
              var rectTransformp = clickedGameObject.GetComponent<RectTransform>();
              var rectTransformc = chosen.GetComponent<RectTransform>();
              rectTransformc.localPosition = rectTransformp.localPosition ; 
          }
       }
    }
    
    public void setAlltoBlanck()
    {
        atext = hand1.GetComponentInChildren<Text>();
        atext.text = "-";
        atext = hand2.GetComponentInChildren<Text>();
        atext.text = "-";
        atext = board1.GetComponentInChildren<Text>();
        atext.text = "-";
        atext = board2.GetComponentInChildren<Text>();
        atext.text = "-";
        atext = board3.GetComponentInChildren<Text>();
        atext.text = "-";
        atext = board4.GetComponentInChildren<Text>();
        atext.text = "-";
        atext = board5.GetComponentInChildren<Text>();
        atext.text = "-";

        aimage = hand1.GetComponentInChildren<Image>();
        aimage.sprite = sprites[0];
        aimage = hand2.GetComponentInChildren<Image>();
        aimage.sprite = sprites[0];
        aimage = board1.GetComponentInChildren<Image>();
        aimage.sprite = sprites[0];
        aimage = board2.GetComponentInChildren<Image>();
        aimage.sprite = sprites[0];
        aimage = board3.GetComponentInChildren<Image>();
        aimage.sprite = sprites[0];
        aimage = board4.GetComponentInChildren<Image>();
        aimage.sprite = sprites[0];
        aimage = board5.GetComponentInChildren<Image>();
        aimage.sprite = sprites[0];

        clickedGameObject = hand1;
        var rectTransformp = clickedGameObject.GetComponent<RectTransform>();
        var rectTransformc = chosen.GetComponent<RectTransform>();
        rectTransformc.localPosition = rectTransformp.localPosition;

    }
    public void setInitialCanvas()
    {
        canvas.SetActive(true);
        errorcanvas.SetActive(false);
        errorcanvas2.SetActive(false);
        mainresult.SetActive(false);
        playernumbertext.text = playerNumber.ToString();
    }
    #endregion]

    //things with setting card to card number and symbol and reseting results 
    #region
    public void PutinMemory()
    {
        for (int j = 0; j < 7; j++)
        {
            cardno = j;
            if (cardno == 0) { clickedGameObject = hand1; }
            if (cardno == 1) { clickedGameObject = hand2; }
            if (cardno == 2) { clickedGameObject = board1; }
            if (cardno == 3) { clickedGameObject = board2; }
            if (cardno == 4) { clickedGameObject = board3; }
            if (cardno == 5) { clickedGameObject = board4; }
            if (cardno == 6) { clickedGameObject = board5; }
                  
            bimage = clickedGameObject.GetComponentInChildren<Image>();
            for (int i = 1; i < 5; i++)
            {
                if (bimage.sprite == sprites[i])
                {
                    card[cardno] += 13 * (i-1);
                    resultSmbl[i - 1]++;
                }
            }
            btext = clickedGameObject.GetComponentInChildren<Text>();
            for (int i = 2; i < 10; i++)
            {
                if (btext.text == i.ToString())
                {
                    card[cardno] += i;
                    resultNo[i]++;
                }
            }
            if (btext.text == "10")
            {
                card[cardno] += 10;
                resultNo[10]++;
            }
            if (btext.text == "J")
            {
                card[cardno] += 11;
                resultNo[11]++;
            }
            if (btext.text == "Q")
            {
                card[cardno] += 12;
                resultNo[12]++;
            }
            if (btext.text == "K")
            {
                card[cardno] += 13;
                resultNo[13]++;
            }
            if (btext.text == "A")
            {
                card[cardno] += 1;
                resultNo[1]++; resultNo[14]++;
            }
        }
        
    }
    public void PutinMemoryOpponent()
    {
        for (int j = 2; j < 7; j++)
        {
            cardno = j;
            if (cardno == 0) { clickedGameObject = hand1; }
            if (cardno == 1) { clickedGameObject = hand2; }
            if (cardno == 2) { clickedGameObject = board1; }
            if (cardno == 3) { clickedGameObject = board2; }
            if (cardno == 4) { clickedGameObject = board3; }
            if (cardno == 5) { clickedGameObject = board4; }
            if (cardno == 6) { clickedGameObject = board5; }

            bimage = clickedGameObject.GetComponentInChildren<Image>();
            for (int i = 1; i < 5; i++)
            {
                if (bimage.sprite == sprites[i])
                {
                    //card[cardno] += 13 * i;
                    resultSmbl[i - 1]++;
                }
            }
            btext = clickedGameObject.GetComponentInChildren<Text>();
            for (int i = 2; i < 10; i++)
            {
                if (btext.text == i.ToString())
                {
                    //card[cardno] += i;
                    resultNo[i]++;
                }
            }
            if (btext.text == "10")
            {
               // card[cardno] += 10;
                resultNo[10]++;
            }
            if (btext.text == "J")
            {
               // card[cardno] += 11;
                resultNo[11]++;
            }
            if (btext.text == "Q")
            {
               // card[cardno] += 12;
                resultNo[12]++;
            }
            if (btext.text == "K")
            {
              //  card[cardno] += 13;
                resultNo[13]++;
            }
            if (btext.text == "A")
            {
               // card[cardno] += 1;
                resultNo[1]++; resultNo[14]++;
            }
            //Debug.Log(card[cardno]);
        }
    }
    public void ClearMemory()
    {
        for (int i = 0; i < 7; i++)
        {
            card[i] = 0;
        }
        myscore = 0;
        opscore = 0;
        numberOfDraws = 0;
        numberOpponentWinningHands = 0;
        for (int i = 0; i < 9; i++)
        {
            myhandcount[i] = 0;
        }
        for (int i = 0; i < 14; i++)
        {
            resultNo[i] = 0;
        }
        for (int i = 0; i < 4; i++)
        {
            resultSmbl[i] = 0;
        }
    }
    public void resetForOpponentCalculation()
    {
        for (int i = 0; i <= 14; i++)
        {
            resultNo[i] = 0;
        }
        for (int i = 0; i < 4; i++)
        {
            resultSmbl[i] = 0;
        }
    }
    public int countCardsinPlay()
    {
        int knowncardno = 0;
        for (int i = 0; i < 7; i++)
        {
            if (card[i] != 0)
            {
                knowncardno++;
            }
        }
        return knowncardno;
    }
    #endregion

    //get card number or symbol method or set result number
    #region
    public int getCardNumber(int a)
    {
        int cardnumber;
        if (a % 13 == 0) { cardnumber = 13; }
        else if (a % 13 == 1) { cardnumber = 14; }
        else { cardnumber = a % 13; }
        return cardnumber;
    } 
    public int getSymbl(int a)
    {
        if (a == 52) return 3;
        else if (a == 39) return 2;
        else if (a  == 26) return 1;
        else if (a  == 13) return 0;
        else return a / 13;             // 1-12 is 0, 14-25 is 1,,,40-51 is 3 
    } 
    public void setResultNumber(int a)
    {
        if (a % 13 == 0) { resultNo[13]++; }
        else if (a % 13 == 1) { resultNo[14]++; resultNo[1]++; }
        else { resultNo[a % 13]++; }
    }
    public void resetResultNumber(int a)
    {
        if (a % 13 == 0) { resultNo[13]--; }
        else if (a % 13 == 1) { resultNo[14]--; resultNo[1]--; }
        else { resultNo[a % 13]--; }
    }
    public void setSymblandNumber(int a,int b)
    {
        setResultNumber(a);
        card[b] = a;
        resultSmbl[getSymbl(a)]++;
    }
    public void resetSymblandNumber(int a,int b)
    {
        resetResultNumber(a);
        card[b] = 0;
        resultSmbl[getSymbl(a)]--;
    }
    #endregion

    //buttons
    #region
    public void NextCard() {
            current_image = clickedGameObject.GetComponentInChildren<Image>();
            curret_text = clickedGameObject.GetComponentInChildren<Text>();


        if (current_image.sprite != sprites[0] && curret_text.text != "-")
        {
                if (clickedGameObject == hand1) { clickedGameObject = hand2; }
                else if (clickedGameObject == hand2) { clickedGameObject = board1; }
                else if (clickedGameObject == board1) { clickedGameObject = board2; }
                else if (clickedGameObject == board2) { clickedGameObject = board3; }
                else if (clickedGameObject == board3) { clickedGameObject = board4; }
                else if (clickedGameObject == board4) { clickedGameObject = board5; }
            var rectTransformp = clickedGameObject.GetComponent<RectTransform>();
            var rectTransformc = chosen.GetComponent<RectTransform>();
            rectTransformc.localPosition = rectTransformp.localPosition;

        }
    }
    public void clickUp()
    {
        if (playerNumber < 8) { playerNumber++; playernumbertext.text = playerNumber.ToString(); }

    }
    public void clickDown()
    {
        if (playerNumber > 2) { playerNumber--; playernumbertext.text = playerNumber.ToString(); }

    }
    public void Spade()
    {
        aimage = clickedGameObject.GetComponentInChildren<Image>();
        aimage.sprite = sprites[1];
         NextCard();


    }
    public void Diamond()
    {
        aimage = clickedGameObject.GetComponentInChildren<Image>();
        aimage.sprite = sprites[2];
        NextCard(); 

    }

    public void Clover()
    {
        aimage = clickedGameObject.GetComponentInChildren<Image>();
        aimage.sprite = sprites[3];
        NextCard();

    }
    public void Heart()
    {
        aimage = clickedGameObject.GetComponentInChildren<Image>();
        aimage.sprite = sprites[4];
        NextCard();

    }
    public void Erase()
    {
        aimage = clickedGameObject.GetComponentInChildren<Image>();
        aimage.sprite = sprites[0];
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "-";
        NextCard();

    }
    public void Click2()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "2";
        NextCard();

    }
    public void Click3()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "3";
        NextCard();

    }
    public void Click4()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "4";
        NextCard();

    }
    public void Click5()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "5";
        NextCard();

    }
    public void Click6()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "6";
        NextCard();

    }
    public void Click7()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "7";
        NextCard();

    }
    public void Click8()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "8";
        NextCard();

    }
    public void Click9()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "9";
        NextCard();

    }
    public void Click10()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "10";
        NextCard();

    }
    public void ClickJ()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "J";
        NextCard();

    }
    public void ClickQ()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "Q";
        NextCard();

    }
    public void ClickK()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "K";
        NextCard();

    }
    public void ClickA()
    {
        atext = clickedGameObject.GetComponentInChildren<Text>();
        atext.text = "A";
        NextCard();

    }
    public void ClickOKerror()
    {
        if (errorcanvas2.activeSelf == false)
        {
            canvas.SetActive(true);
        }
        errorcanvas.SetActive(false);
    }
    public void ClickOKerror2()
    {
        if (errorcanvas.activeSelf == false)
        {
            canvas.SetActive(true);
        }
        errorcanvas2.SetActive(false);
    }
    public void ClickOKmainresult()
    {   
        canvas.SetActive(true);
        mainresult.SetActive(false);
    }
    public void ClickOKpreflopresult()
    {
        canvas.SetActive(true);
        preflopresult.SetActive(false);
    }
    #endregion //buttons

    // math calculation methods
    #region
    public int Computation(int a, int b)
    {
        int ctmp = 1;
        for(int i=a; i>a-b; i--)
        {
            ctmp *= i; Debug.Log(i);
        }
        
        ctmp /= Factorial(b);
        return ctmp;
    }
    public int Factorial(int c)
    {
        int tmp = 1;
        int k = c;
        while (k >=1)
        {
            tmp *= k;
            k--;
        }
        return tmp;
    }
    public int max(int a,int b)
    {
        if (a >= b) return a;
        else return b;
    }
    public int min(int a, int b)
    {
        if (a <= b) return a;
        else return b;
    }
    #endregion

    //number of different hands version 1 not used
    #region
    public int Straightflush()
    {
        int sf = 0;
        int s = 0;
        for (int i = 1; i <= 10; i++)
        {

            if (resultNo[i] > 0 && resultNo[i + 1] > 0 && resultNo[i + 2] > 0 && resultNo[i + 3]>0 && resultNo[i + 4] > 0)
            {
                s++;
            }
        }
        int f = 0;
        for (int i = 0; i < 4; i++)
        {

            if (resultSmbl[i] >= 5)
            {
                f++;
            }
        }
        if (s > 0 && f > 0) { sf = 1; }
        return sf;
    }  //8
    public int Four()
    {
        int k4 = 0;
        for (int i = 2; i <= 14; i++)
        {
            if (resultNo[i] == 4)
            {
                k4++;
            }
        }

        //if (k > 1) { k = 0; }// two pair
        return k4;
    }           //7
    public int Fullhouse()
    {
        int fh = 0;
        int k2 = 0;
        int k3 = 0;
        for (int i = 2; i <= 14; i++)
        {

            if (resultNo[i] == 2)
            {
                k2++;
            }
            if (resultNo[i] == 3) 
            {
                k3++;
            }
        }
        if (k2 > 0 && k3 == 1) { fh = 1; }
        return fh;
    }      //6
    public int Flush()
    {
        int f = 0;
        for (int i = 0; i < 4; i++)
        {

            if (resultSmbl[i] >= 5)
            {
                f++;
            }
        }
        int s = 0;
        for (int i = 0; i <= 8; i++)
        {

            if (resultNo[i] > 0 && resultNo[i + 1] > 0 && resultNo[i + 2] > 0 && resultNo[i + 3] > 0 && resultNo[i + 4] > 0)
            {
                s++;
            }
        }
        if (s>0) { f = 0; }
        return f;
    }          //5
    public int Straight()
    {
        int s = 0;
        for (int i = 0; i <= 8; i++)
        {

            if (resultNo[i] > 0 && resultNo[i + 1]>0 && resultNo[i + 2] > 0 && resultNo[i + 3]>0 && resultNo[i + 4] > 0)
            {
                s++;
            }
        }
        int f = 0;
        for (int i = 0; i < 4; i++)
        {

            if (resultSmbl[i] >= 5)
            {
                f++;
            }
        }
        if (f > 0) { s = 0; }
        return s;
    }       //4
    public int Three()
    {
        int k2 = 0;
        int k3 = 0;
        int k4 = 0;
        for (int i = 2; i <= 14; i++)
        {
            if (resultNo[i] == 2) //fullhouse
            {
                k2++;
            }
            if (resultNo[i] == 3)
            {
                k3++;
            }
            if (resultNo[i] == 4) //four
            {
                k4++;
            }

        }
        if (k4 > 0 || k2>0) { k3 = 0; }
        if (k3 > 1) { k3 = 1; }// two triple
        return k3;
    }          //3
    public int Twopair()
    {
        int k22 = 0;
        int k3 = 0;
        for (int i = 2; i < 14; i++)
        {
            if (resultNo[i] == 2)
            {
                k22++;
            }
            if (resultNo[i] == 3) //three fullhouse
            {
                k3++;
            }

        }
        if (k22 != 2 || k3 > 0) { k22 = 0; }
        if (k22 == 2) { k22--; }
        return k22;
    }        //2
    public int Pair()
    {
        int k2 = 0;
        int k3 = 0;
        int k4 = 0;
        for (int i = 2; i <= 14; i++)
        {
            if (resultNo[i] == 2)
            {
                k2++;
            }
            if (resultNo[i] == 3) //three fullhouse
            {
                k3++;
            }
            if (resultNo[i] == 4) //four
            {
                k4++;
            }
            //if (resultNo[i] > 4) { Debug.Log("error"); }

        }
        if (k3 > 0 || k4 > 0 || k2 > 1) { k2 = 0; }//more than twopair

        return k2;
    }           //1
    #endregion

    //number of hands version 2 not used
    #region
    public int Straightflush2()
    {
        int sf = 0;
        int s = 0;
        for (int i = 1; i <= 10; i++)
        {

            if (resultNo[i] > 0 && resultNo[i + 1] > 0 && resultNo[i + 2] > 0 && resultNo[i + 3] > 0 && resultNo[i + 4] > 0)
            {
                s++;
            }
        }
        int f = 0;
        for (int i = 0; i < 4; i++)
        {

            if (resultSmbl[i] >= 5)
            {
                f++;
            }
        }
        if (s > 0 && f > 0) { sf = 1; }
        return sf;
    }  //8
    public int Four2()
    {
        int k4 = 0;
        for (int i = 2; i <= 14; i++)
        {
            if (resultNo[i] == 4)
            {
                k4++;
            }
        }
        return k4;
    }           //7
    public int Fullhouse2()
    {
        int fh = 0;
        int k2 = 0;
        int k3 = 0;
        for (int i = 2; i <= 14; i++)
        {

            if (resultNo[i] == 2)
            {
                k2++;
            }
            if (resultNo[i] == 3)
            {
                k3++;
            }
        }
        if (k2 > 0 && k3 == 1) { fh = 1; }
        return fh;
    }      //6
    public int Flush2()
    {
        int f = 0;
        for (int i = 0; i < 4; i++)
        {

            if (resultSmbl[i] >= 5)
            {
                f++;
            }
        }
        return f;
    }          //5
    public int Straight2()
    {
        int s = 0;
        for (int i = 0; i <= 8; i++)
        {

            if (resultNo[i] > 0 && resultNo[i + 1] > 0 && resultNo[i + 2] > 0 && resultNo[i + 3] > 0 && resultNo[i + 4] > 0)
            {
                s++;
            }
        }
        return s;
    }       //4
    public int Three2()
    {
        int k3 = 0;
        for (int i = 2; i <= 14; i++)
        {

            if (resultNo[i] == 3)
            {
                k3++;
            }
        }
        if (k3 > 0) k3 = 1; //dont count threes twice ex. 1112223
        return k3;
    }          //3
    public int Twopair2()
    {
        int k22 = 0;
        for (int i = 2; i < 14; i++)
        {
            if (resultNo[i] == 2)
            {
                k22++;
            }
        }
        return k22;
    }        //2
    public int Pair2()
    {
        int k2 = 0;
       
        for (int i = 2; i <= 14; i++)
        {
            if (resultNo[i] == 2)
            {
                k2++;
            }
        }
        return k2;
    }           //1
    #endregion

    // hand scoring version3 my and op
    #region
    public int myscoreStraightflush()
    {
        int score = 0;
        int[] cardnumber = new int[7];
        int[] resultSmblStraightFlush = new int[4];

        for(int i = 0; i < 7; i++)
        {
            cardnumber[i] = card[i];
        }
        Array.Sort(cardnumber);

        for(int i = 2; i >= 0; i--)
        {
            if (cardnumber[i + 1] == cardnumber[i] + 1 && cardnumber[i + 2] == cardnumber[i] + 2 && cardnumber[i + 3] == cardnumber[i] + 3 && cardnumber[i + 4] == cardnumber[i] + 4)
            {
                for(int k = 0; k < 4; k++)
                {
                    resultSmblStraightFlush[k] = 0;
                }
                resultSmblStraightFlush[getSymbl(cardnumber[i])]++;
                resultSmblStraightFlush[getSymbl(cardnumber[i + 4])]++;
                for (int j = 0; j < 4; j++)
                {
                   // Debug.Log("i" + i + "j" + j+"symbl"+resultSmblStraightFlush[j]);
                    if (resultSmblStraightFlush[j] == 2)
                    {
                        score += 800000000;
                        score += getCardNumber(cardnumber[i + 4]) * 1000000;
                        break;
                    }
                }
                if (score > 100000000) break;
            }
        }
        if (score < 100000000)
        {
            for (int n = 0; n < 4; n++)
            {
                if (cardnumber.Contains(1 + n * 13) && cardnumber.Contains(10 + n * 13) && cardnumber.Contains(11 + n * 13) && cardnumber.Contains(12 + n * 13) && cardnumber.Contains(13 + n * 13))
                {
                    score += 800000000;
                    score += 14 * 1000000;
                    break;
                }
            }
        }
        return score;
    } 
    public int myscoreFour()
    {
        int score = 0;
        int fourNum = 0;
        int[] number = new int[7];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 4)
            {
                score += 700000000;
                score += i * 1000000;
                fourNum = i;
                break;
            }
        }
        for (int i = 0; i < 7; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == fourNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000;
        return score;
    }
    public int myscoreFullhouse()
    {
        int score = 0;
        int k2 = 0;
        int k3 = 0;

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] >= 2 && k2 != 1 && k3 == 1)
            {
                score += i * 10000;
                k2++;
            }
            if (resultNo[i] == 3 && k3 != 1)
            {
                score += i * 1000000;
                k3++;
            }
        }
        if (k2 > 0 && k3 >0) { score += 600000000; }
        return score;
    }
    public int myscoreFlush()
    {
        int score = 0;
        int[] cardnumber = new int[7];
        int[] resultSmblFlush = new int[4];

        for (int i = 0; i < 7; i++)
        {
            cardnumber[i] = card[i];
        }
        Array.Sort(cardnumber);
        for (int i = 6; i >= 0; i--)
        {
            resultSmblFlush[getSymbl(cardnumber[i])]++;
            for (int j = 0; j < 4; j++)
            {
                if (resultSmblFlush[j] >= 5)
                {
                    score += 500000000;
                    score += getCardNumber(cardnumber[i + 4]) * 1000000;
                    break;
                }
            }
            if (score > 100000000) break;

        }
        return score;
    }          
    public int myscoreStraight()
    {
        int score = 0;

        for (int i = 10; i >= 2; i--)
        {

            if (resultNo[i] > 0 && resultNo[i + 1] > 0 && resultNo[i + 2] > 0 && resultNo[i + 3] > 0 && resultNo[i + 4] > 0)
            {
                score += 400000000;
                score += (5*i+10)*1000000;
                break;
            }
        }
        return score;
    }
    public int myscoreThree()
    {
        int score = 0;
        int threeNum = 0;
        int[] number = new int[7];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 3)
            {
                score += 300000000;
                score += i * 1000000;
                threeNum = i;
                break;
            }
        }
        for (int i = 0; i < 7; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == threeNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000 + number[5] * 100;
        return score;
    }
    public int myscoreTwopair()
    {
        int score = 0;
        int pairNum=0;
        int pairNum2=0;
        int[] number = new int[7];
        int j = 0;

        for (int i = 14; i >=2 ; i--)
        {
            if (resultNo[i] == 2 && j!=1)
            {
                score += i * 1000000;
                pairNum = i;
                j = 1;
            }
            else if (resultNo[i] == 2 && j==1)
            {
                score += 200000000;
                score += i * 10000;
                pairNum2 = i;
            }
        }
        for (int i = 0; i < 7; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == pairNum ||number[i] == pairNum2) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 100;
        return score;
    }        
    public int myscorePair()
    {
        int score = 0;
        int pairNum = 0;
        int[] number = new int[7];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 2)
            {
                score += 100000000;
                score += i * 1000000;
                pairNum = i;
                break;
            }
        }
        for(int i = 0; i < 7; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == pairNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000 + number[5] * 100 + number[4];
        return score;
    }
    public int myscoreHighcard()
    {
        int score = max(getCardNumber(card[0]), getCardNumber(card[1])) * 100 + min(getCardNumber(card[0]), getCardNumber(card[1]));
        return score;
    }

    public int opscoreStraightflush()
    {
        int score = 0;
        int[] cardnumber = new int[9];
        int[] resultSmblStraightFlush = new int[4];

        for (int i = 2; i < 9; i++)
        {
            cardnumber[i] = card[i];
        }
        Array.Sort(cardnumber);

        for (int i = 4; i >= 2; i--)
        {
            if (cardnumber[i + 1] == cardnumber[i] + 1 && cardnumber[i + 2] == cardnumber[i] + 2 && cardnumber[i + 3] == cardnumber[i] + 3 && cardnumber[i + 4] == cardnumber[i] + 4)
            {
                for (int k = 0; k < 4; k++)
                {
                    resultSmblStraightFlush[k] = 0;
                }
                resultSmblStraightFlush[getSymbl(cardnumber[i])]++;
                resultSmblStraightFlush[getSymbl(cardnumber[i + 4])]++;
                for (int j = 0; j < 4; j++)
                {
                    // Debug.Log("i" + i + "j" + j+"symbl"+resultSmblStraightFlush[j]);
                    if (resultSmblStraightFlush[j] == 2)
                    {
                        score += 800000000;
                        score += getCardNumber(cardnumber[i + 4]) * 1000000;
                        break;
                    }
                }
                if (score > 100000000) break;
            }
        }
        if (score < 100000000)
        {
            for (int n = 0; n < 4; n++)
            {
                if (cardnumber.Contains(1 + n * 13) && cardnumber.Contains(10 + n * 13) && cardnumber.Contains(11 + n * 13) && cardnumber.Contains(12 + n * 13) && cardnumber.Contains(13 + n * 13))
                {
                    score += 800000000;
                    score += 14 * 1000000;
                    break;
                }
            }
        }
        return score;
    }
    public int opscoreFour()
    {
        int score = 0;
        int fourNum = 0;
        int[] number = new int[9];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 4)
            {
                score += 700000000;
                score += i * 1000000;
                fourNum = i;
                break;
            }
        }
        for (int i = 2; i < 9; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == fourNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000;
        return score;
    }
    public int opscoreFullhouse()
    {
        int score = 0;
        int k2 = 0;
        int k3 = 0;

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] >= 2 && k2 != 1 && k3 == 1)
            {
                score += i * 10000;
                k2++;
            }
            if (resultNo[i] == 3 && k3 != 1)
            {
                score += i * 1000000;
                k3++;
            }
        }
        if (k2 > 0 && k3 > 0) { score += 600000000; }
        return score;
    }
    public int opscoreFlush()
    {
        int score = 0;
        int[] cardnumber = new int[9];
        int[] resultSmblFlush = new int[4];

        for (int i = 2; i < 9; i++)
        {
            cardnumber[i] = card[i];
        }
        Array.Sort(cardnumber);
        for (int i = 8; i >= 2; i--)
        {
                resultSmblFlush[getSymbl(cardnumber[i])]++;

                for (int j = 0; j < 4; j++)
                {
                    if (resultSmblFlush[j] >= 5)
                    {
                        score += 500000000;
                        score += getCardNumber(cardnumber[i + 4]) * 1000000;
                        break;
                    }
                }
                if (score > 100000000) break;
            
        }
        return score;
    }
    public int opscoreStraight()
    {
        int score = 0;

        for (int i = 10; i >= 2; i--)
        {

            if (resultNo[i] > 0 && resultNo[i + 1] > 0 && resultNo[i + 2] > 0 && resultNo[i + 3] > 0 && resultNo[i + 4] > 0)
            {
                score += 400000000;
                score += (5 * i + 10) * 1000000;
                break;
            }
        }
        return score;
    }
    public int opscoreThree()
    {
        int score = 0;
        int threeNum = 0;
        int[] number = new int[9];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 3)
            {
                score += 300000000;
                score += i * 1000000;
                threeNum = i;
                break;
            }
        }
        for (int i = 2; i < 9; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == threeNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000 + number[5] * 100;
        return score;
    }
    public int opscoreTwopair()
    {
        int score = 0;
        int pairNum = 0;
        int pairNum2 = 0;
        int[] number = new int[9];
        int j = 0;

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 2 && j != 1)
            {
                score += i * 1000000;
                pairNum = i;
                j = 1;
            }
            else if (resultNo[i] == 2 && j == 1)
            {
                score += 200000000;
                score += i * 10000;
                pairNum2 = i;
            }
        }
        for (int i = 2; i < 9; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == pairNum || number[i] == pairNum2) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 100;
        return score;
    }
    public int opscorePair()
    {
        int score = 0;
        int pairNum = 0;
        int[] number = new int[9];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 2)
            {
                score += 100000000;
                score += i * 1000000;
                pairNum = i;
                break;
            }
        }
        for (int i = 2; i < 9; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == pairNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000 + number[5] * 100 + number[4];
        return score;
    }
    public int opscoreHighcard()
    {
        int score = max(getCardNumber(card[7]), getCardNumber(card[8])) * 100 + min(getCardNumber(card[7]), getCardNumber(card[8]));
        return score;
    }
    #endregion

    //my hand score and opponent hand score
    #region
    public int myhandscore()
    {
        if (myscoreStraightflush()  > 100000000) return myscoreStraightflush();
        else if (myscoreFour()      > 100000000) return myscoreFour();
        else if (myscoreFullhouse() > 100000000) return myscoreFullhouse();
        else if (myscoreFlush()     > 100000000) return myscoreFlush();
        else if (myscoreStraight()  > 100000000) return myscoreStraight();
        else if (myscoreThree()     > 100000000) return myscoreThree();
        else if (myscoreTwopair()   > 100000000) return myscoreTwopair();
        else if (myscorePair()      > 100000000) return myscorePair();
        else                                     return myscoreHighcard();
    }
    public int ophandscore()
    { 
        if (opscoreStraightflush()  > 100000000) return opscoreStraightflush();
        else if (opscoreFour()      > 100000000) return opscoreFour();
        else if (opscoreFullhouse() > 100000000) return opscoreFullhouse();
        else if (opscoreFlush()     > 100000000) return opscoreFlush();
        else if (opscoreStraight()  > 100000000) return opscoreStraight();
        else if (opscoreThree()     > 100000000) return opscoreThree();
        else if (opscoreTwopair()   > 100000000) return opscoreTwopair();
        else if (opscorePair()      > 100000000) return opscorePair();
        else                                     return opscoreHighcard();
    }
    #endregion

    //put in result screen
    #region
    public void setMainResult()
    {
        double opwinhand = numberOpponentWinningHands;
        double draws = numberOfDraws;
        double mydraw;
        double mywin;
        double mylose;
        Text text;
        if (countCardsinPlay() == 7) //(52-7)C2=990 
        {  
            //my winning chance
            mywin = (990 - opwinhand - draws) / 990;
            mywin = Math.Pow(mywin, (playerNumber - 1))*100;
            text = mywinningChance.GetComponent<Text>();
            text.text = mywin.ToString("f3") + "%";
            text = oplosingChance.GetComponent<Text>();
            text.text = mywin.ToString("f3") + "%";
            //tie
            mydraw = draws / 990;
            mydraw = Math.Pow(mydraw, (playerNumber - 1))*100;
            text = mytieChance.GetComponent<Text>();
            text.text = mydraw.ToString("f3") + "%";
            text = optieChance.GetComponent<Text>();
            text.text = mydraw.ToString("f3") + "%";
            //my losing chance
            mylose = 100 - mywin - mydraw;
            text = mylosingChance.GetComponent<Text>();
            text.text = mylose.ToString("f3") + "%";
            text = opwinningChance.GetComponent<Text>();
            text.text = mylose.ToString("f3") + "%";
        }
        else if (countCardsinPlay() == 6) //(52-6)C3=15180
        {
            //my winning chance
            mywin = (15180 - opwinhand - draws) / 15180;
            mywin = Math.Pow(mywin, (playerNumber - 1))*100;
            text = mywinningChance.GetComponent<Text>();
            text.text = mywin.ToString("f3") + "%";
            text = oplosingChance.GetComponent<Text>();
            text.text = mywin.ToString("f3") + "%";
            //tie
            mydraw = draws / 15180;
            mydraw = Math.Pow(mydraw, (playerNumber - 1))*100;
            text = mytieChance.GetComponent<Text>();
            text.text = mydraw.ToString("f3") + "%";
            text = optieChance.GetComponent<Text>();
            text.text = mydraw.ToString("f3") + "%";
            //my losing chance
            mylose = 100 - mywin - mydraw;
            text = mylosingChance.GetComponent<Text>();
            text.text = mylose.ToString("f3") + "%";
            text = opwinningChance.GetComponent<Text>();
            text.text = mylose.ToString("f3") + "%";
        }
        else if (countCardsinPlay() == 5) //(52-5)C4=178,365 
        {
            //my winning chance
            mywin = (178365 - opwinhand - draws) / 178365;
            mywin = Math.Pow(mywin, (playerNumber - 1))*100;
            text = mywinningChance.GetComponent<Text>();
            text.text = mywin.ToString("f3") + "%";
            text = oplosingChance.GetComponent<Text>();
            text.text = mywin.ToString("f3") + "%";
            //tie
            mydraw = draws / 178365;
            mydraw = Math.Pow(mydraw, (playerNumber - 1))*100;
            text = mytieChance.GetComponent<Text>();
            text.text = mydraw.ToString("f3") + "%";
            text = optieChance.GetComponent<Text>();
            text.text = mydraw.ToString("f3") + "%";
            //my losing chance
            mylose = 100 - mywin - mydraw;
            text = mylosingChance.GetComponent<Text>();
            text.text = mylose.ToString("f3") + "%";
            text = opwinningChance.GetComponent<Text>();
            text.text = mylose.ToString("f3") + "%";
        }
        canvas.SetActive(false);
        mainresult.SetActive(true);
    }
    public void setResultpreflop()
    {
        for(int i = 0; i < 9; i++)
        {
            prefloptexts[2*i].text = myhandcount[8 - i].ToString();
            prefloptexts[2 * i + 1].text = (myhandcount[8 - i] / 21187.6).ToString("f3")+"%";
        }
        canvas.SetActive(false);
        preflopresult.SetActive(true);
    }
    #endregion

    //calculation after river aka 5 cards on board, turn aka 4, flop aka 3 , preflop aka 2cards
    #region
    public void calculateAfterRiver()
    {
        myscore = myhandscore();
        resetForOpponentCalculation();
        PutinMemoryOpponent();
        // all possible hands for opponent
        for (int i = 1; i <= 52; i++)
        {
            if (i != card[0] && i != card[1] && i != card[2] && i != card[3] && i != card[4] && i != card[5] && i != card[6])
            {
                setResultNumber(i);
                card[7] = i;
                resultSmbl[getSymbl(i)]++;
                for (int j = i + 1; j <= 52; j++)
                {
                    if (j != card[0] && j != card[1] && j != card[2] && j != card[3] && j != card[4] && j != card[5] && j != card[6])
                    {
                        setResultNumber(j);
                        card[8] = j;
                        resultSmbl[getSymbl(j)]++;

                        opscore = ophandscore();            //get opponent hand score and compare with my hand score
                        if (opscore > myscore) { numberOpponentWinningHands++;/* Debug.Log(i + " " + j + " " + opscore); */}
                        else if (opscore == myscore) numberOfDraws++;

                        resetResultNumber(j);
                        card[8] = 0;
                        resultSmbl[getSymbl(j)]--;
                    }
                }
                resetResultNumber(i);
                card[7] = 0;
                resultSmbl[getSymbl(i)]--;
            }
        }

    }
    public void calculateAfterTurn(int a)
    {
        myscore = myhandscore();
        resetForOpponentCalculation();
        PutinMemoryOpponent();
        // all possible hands for opponent
        for (int i = a+1; i <= 52; i++)
        {
            if (i != card[0] && i != card[1] && i != card[2] && i != card[3] && i != card[4] && i != card[5] && i != card[6])
            {
                setResultNumber(i);
                card[7] = i;
                resultSmbl[getSymbl(i)]++;
                for (int j = i + 1; j <= 52; j++)
                {
                    if (j != card[0] && j != card[1] && j != card[2] && j != card[3] && j != card[4] && j != card[5] && j != card[6])
                    {
                        setResultNumber(j);
                        card[8] = j;
                        resultSmbl[getSymbl(j)]++;
                                     
                        opscore = ophandscore();            //get opponent hand score and compare with my hand score
                        if (opscore > myscore) { numberOpponentWinningHands++;/* Debug.Log(i + " " + j + " " + opscore); */}
                        else if (opscore == myscore) numberOfDraws++;

                        resetResultNumber(j);
                        card[8] = 0;
                        resultSmbl[getSymbl(j)]--;
                    }
                }
                resetResultNumber(i);
                card[7] = 0;
                resultSmbl[getSymbl(i)]--;
            }
        }

    }
    public void calculateAfterFlop(int b)
    {
        for (int k = b+1; k <= 52; k++)
        {
            if (k != card[0] && k != card[1] && k != card[2] && k != card[3] && k != card[4] && k != card[5])
            {
                setResultNumber(k);
                card[6] = k;
                resultSmbl[getSymbl(k)]++;

                calculateAfterTurn(k);

                resetResultNumber(k);
                card[6] = 0;
                resultSmbl[getSymbl(k)]--;
            }
        }
    }
    public void countmyhands()
    {
        myscore = myhandscore();
        for(int i = 8; i >= 0; i--)
        {
            if (myscore > i * 100000000) { myhandcount[i]++; break; }
        }                 
    }
    #endregion

    //error check for input
    #region
    public bool checkInputError()
    {
        for (int i = 0; i < 6; i++)
        {
            if (card[i] == 0) { continue; }
            for (int j = i + 1; j < 7; j++)
            {
                if (card[i] == card[j])
                { 
                    canvas.SetActive(false);
                    errorcanvas.SetActive(true);
                    return true;
                }
            }
        }
        for (int j = 0; j < 7; j++)
        {
            cardno = j;
            if (cardno == 0) { clickedGameObject = hand1; }
            if (cardno == 1) { clickedGameObject = hand2; }
            if (cardno == 2) { clickedGameObject = board1; }
            if (cardno == 3) { clickedGameObject = board2; }
            if (cardno == 4) { clickedGameObject = board3; }
            if (cardno == 5) { clickedGameObject = board4; }
            if (cardno == 6) { clickedGameObject = board5; }

            bimage = clickedGameObject.GetComponentInChildren<Image>();
            btext = clickedGameObject.GetComponentInChildren<Text>();

            if (bimage.sprite == sprites[0] && btext.text != "-")
            {
                canvas.SetActive(false);
                errorcanvas2.SetActive(true);
                return true;
            }
            if (bimage.sprite != sprites[0] && btext.text == "-")
            {
                canvas.SetActive(false);
                errorcanvas2.SetActive(true);
                return true;
            }
        }
        return false;
    }
    #endregion

    public void Calculate()
    {
        ClearMemory();
        PutinMemory();
        if (!checkInputError())
        {
            if (countCardsinPlay() == 7)       //after river
            {
                Debug.Log("myscore" + myhandscore());
                calculateAfterRiver();
                setMainResult();
            }
            else if (countCardsinPlay() == 6)  //after turn
            {
                for (int k = 1; k <= 52; k++)
                {
                    if (k != card[0] && k != card[1] && k != card[2] && k != card[3] && k != card[4] && k != card[5])
                    {
                        setResultNumber(k);
                        card[6] = k;
                        resultSmbl[getSymbl(k)]++;

                        calculateAfterTurn(k);

                        resetResultNumber(k);
                        card[6] = 0;
                        resultSmbl[getSymbl(k)]--;
                    }
                }
                setMainResult();
            }
            else if (countCardsinPlay() == 5)  //after flop
            {
                for (int p = 1; p <= 52; p++)
                {
                    if (p != card[0] && p != card[1] && p != card[2] && p != card[3] && p != card[4])
                    {
                        setResultNumber(p);
                        card[5] = p;
                        resultSmbl[getSymbl(p)]++;

                        calculateAfterFlop(p);

                        resetResultNumber(p);
                        card[5] = 0;
                        resultSmbl[getSymbl(p)]--;
                    }
                }
                setMainResult();
            }      
            else if (countCardsinPlay()==2) 
            {
                for(int a = 1; a <= 52; a++)
                {
                    if (a != card[0] && a != card[1])
                    {
                        setSymblandNumber(a, 2);
                        for (int b = a + 1; b <= 52; b++)
                        {
                            if (b != card[0] && b != card[1] && b != card[2])
                            {
                                setSymblandNumber(b, 3);
                                for (int c = b + 1; c <= 52; c++)
                                {
                                    if (c != card[0] && c != card[1] && c != card[2] && c != card[3])
                                    {
                                        setSymblandNumber(c, 4);
                                        for (int d = c + 1; d <= 52; d++)
                                        {
                                            if (d != card[0] && d != card[1] && d != card[2] && d != card[3] && d != card[4])
                                            {
                                                setSymblandNumber(d, 5);
                                                for (int e = d + 1; e <= 52; e++)
                                                {
                                                    if (e != card[0] && e != card[1] && e != card[2] && e != card[3] && e!= card[4] && e != card[5])
                                                    {
                                                        setSymblandNumber(e, 6);

                                                        countmyhands();

                                                        resetSymblandNumber(e, 6);
                                                    }
                                                }
                                                resetSymblandNumber(d, 5);
                                            }
                                        }
                                        resetSymblandNumber(c, 4);
                                    }
                                }
                                resetSymblandNumber(b, 3);
                            }
                        }
                        resetSymblandNumber(a, 2);
                    }
                }
                setResultpreflop();
            }
            Debug.Log("number of opponent winning hand " + numberOpponentWinningHands);
            
        }
    }
}

