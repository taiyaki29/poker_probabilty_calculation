using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using System.Linq;

namespace maincontrol
{

    public class cardcontroller : MonoBehaviour
    {
        //declare variables
        #region
        GameObject clickedGameObject;
        public GameObject hand1;
        public GameObject hand2;
        public GameObject board1;
        public GameObject board2;
        public GameObject board3;
        public GameObject board4;
        public GameObject board5;
        public GameObject canvas;
        public GameObject errorcanvas;
        public GameObject errorcanvas2;
        public GameObject notcalculatedmessage;
        public GameObject mainresult;
        public GameObject preflopresult;
        public GameObject chosen;
        public GameObject mywinningChance;
        public GameObject mytieChance;
        public GameObject mylosingChance;
        public GameObject opwinningChance;
        public GameObject optieChance;
        public GameObject oplosingChance;
        public GameObject bgmcontrol;
        public GameObject bgmcontrolbutton;
        public GameObject bgmcontrolbuttonbackground;
        public GameObject loadingscreen;
        public GameObject loadingscreenPic;
        public Sprite[] sprites;
        public Sprite[] loadingpics;
        public Text[] prefloptexts;
        public Text loadingtext;
        public Text loadingtextTriviatext;
        public ParticleSystem psWhite;
        public ParticleSystem psRed;
        public ParticleSystem psBlue;
        public ParticleSystem psGreen;
        public AudioClip bgm;

        public GameObject playerNumberScript;
        public GameObject buttonControlScript;

        Text atext;                            // initial text also used after input
        Text btext;                            // text after input 
        Image aimage;                          //initial image also used after inout
        Image bimage;                          //image after input
        Image current_image;                   //for moving to next card
        Text curret_text;                      //for moving to next card
        Sprite asprite;                        //initial sprite
        int[] card = new int[9];                //check which cards are used     ace of spade is 1, 2 of spade is 2,,,, 3 of diamond is (3+13)=16,,,,
        int[] resultNo = new int[15];           // (1 is resultNo[1], will use for 12345 srtaight) , 2 is resultNo[2],,,13 is resultNo[13],1is also resultNo[14], 
        int[] resultSmbl = new int[4];          //0 is Spades, 1 is Diamonds, 2 is Clubs, 3 is Hearts
        int[] myhandcount = new int[9];        //number of each hand
        int cardno;                            //number of card hand1 is 1, hand2 is 2, board1 is 3,,,,,opponent1 is 7, opponent2 is 8 
        int myscore = 0;                        //scoring my hand for comparison ex.pair is 100000
        int opscore = 0;                        //same but for opponent
        int numberOpponentWinningHands = 0;    //number of hands the opponent won
        int numberOfDraws = 0;                 //number of same hands
        int smallercardnumber;                 //smaller card number preflop
        int biggercardnumber;                  //bigger card number preflop
        int hand1number;                       //number of smaller card number preflop
        int hand2number;                       //number of bigger card number preflop
        int hand1symbol;                       //symbol of smaller card number preflop
        int hand2symbol;                       //symbol of smaller card number preflop
        int handsymbol;                        //symbol of cards in hand preflop 0 is for same symbol, 1is for different symbol
        ParticleSystem.EmissionModule emWhite; //poker chip particles
        ParticleSystem.EmissionModule emRed;
        ParticleSystem.EmissionModule emBlue;
        ParticleSystem.EmissionModule emGreen;
        AudioSource audioSource;               //bgm
        int onoff = 0;                         //bgm switch
        string[] loadingtextTrivia= 
        {"Did you know \nIt is more than twice as likely to get a pair than a high card.",
         "Did you know \nThere are only 169 types of hands you can have preflop.",
         "Did you know \nThere are nicknames for hand cards,\nAA rockets\nKK cowboys\nQQ Ladies\nJJ fish hooks...",
         "Did you know \nThere are nicknames for hand cards,\n88 snowman\n77 hockey sticks\n44 sail boats\n33 crabs...",
         "Did you know \nThere are nicknames for hand cards,\n22 ducks\nAK big slick\nAQ big chick\nAJ blackjack...",
         "Did you know \nThere are nicknames for hand cards,\nA9 McDermott\nA8 dead man's hand\nA2 little slick...",
         "Did you know \nThere are nicknames for hand cards,\nK9 canine\nQ10 cutie\nQ7 computer hand..",
         "Did you know \nThere are nicknames for hand cards,\nQ9 T.J. Cloutier\nJ7 jack daniels\nJ5 jackson five...",
         "Did you know \nThere are nicknames for hand cards,\n10,2 doyle brunson\n8,4 big brother\n3,2 nut low...",
        };              //trivia about poker during loading
        float seconds;
        Image loadingimage;
        #endregion

        //memorized answer for preflop and trivia text
        #region
        int[,,,] possibleHands = { { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 769230, 746928, 381436, 111908, 41562, 49632, 17848, 216 } }, { { 391620, 919632, 433452, 117678, 92802, 137306, 21450, 2668, 2152 }, { 423720, 968576, 444440, 119482, 96646, 41518, 21450, 2668, 260 } }, { { 387045, 916776, 433452, 117438, 100233, 137262, 21690, 2668, 2196 }, { 418770, 965568, 444440, 119242, 104604, 41474, 21690, 2668, 304 } }, { { 382470, 913920, 433452, 117198, 107664, 137218, 21930, 2668, 2240 }, { 413820, 962560, 444440, 119002, 112562, 41430, 21930, 2668, 348 } }, { { 377895, 911064, 433452, 116958, 115095, 138209, 22170, 2668, 1249 }, { 408870, 959552, 444440, 118762, 120520, 41431, 22170, 2668, 347 } }, { { 392535, 928200, 436095, 117279, 80115, 139155, 22410, 2668, 303 }, { 424710, 977600, 447150, 119094, 83350, 41431, 22410, 2668, 347 } }, { { 387960, 925344, 436095, 117039, 87546, 139111, 22650, 2668, 347 }, { 419760, 974592, 447150, 118854, 91308, 41431, 22650, 2668, 347 } }, { { 387960, 925344, 436095, 116799, 87546, 139111, 22890, 2668, 347 }, { 419760, 974592, 447150, 118614, 91308, 41431, 22890, 2668, 347 } }, { { 387045, 925344, 436095, 116559, 88461, 139110, 23130, 2668, 348 }, { 418770, 974592, 447150, 118374, 92298, 41430, 23130, 2668, 348 } }, { { 391620, 928200, 436095, 116319, 81030, 139154, 23370, 2668, 304 }, { 423720, 977600, 447150, 118134, 84340, 41474, 23370, 2668, 304 } }, { { 396195, 931056, 436095, 116079, 73599, 139198, 23610, 2668, 260 }, { 428670, 980608, 447150, 117894, 76382, 41518, 23610, 2668, 260 } }, { { 400770, 933912, 436095, 115839, 66168, 139242, 23850, 2668, 216 }, { 433620, 983616, 447150, 117654, 68424, 41562, 23850, 2668, 216 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 438570, 986624, 447150, 117414, 60466, 41562, 24090, 2668, 216 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 423720, 968576, 444440, 119482, 96646, 41518, 21450, 2668, 260 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 763290, 745416, 373362, 119866, 41474, 57200, 17848, 304 } }, { { 373320, 899640, 430809, 116619, 134298, 136272, 21948, 2668, 3186 }, { 403920, 947520, 441730, 118412, 140784, 41430, 21948, 2668, 348 } }, { { 368745, 896784, 430809, 116379, 141729, 136228, 22188, 2668, 3230 }, { 398970, 944512, 441730, 118172, 148742, 41386, 22188, 2668, 392 } }, { { 364170, 893928, 430809, 116139, 149160, 137219, 22428, 2668, 2239 }, { 394020, 941504, 441730, 117932, 156700, 41387, 22428, 2668, 391 } }, { { 378810, 911064, 433452, 116460, 114180, 138165, 22668, 2668, 1293 }, { 409860, 959552, 444440, 118264, 119530, 41387, 22668, 2668, 391 } }, { { 387960, 925344, 436095, 116781, 87546, 139111, 22908, 2668, 347 }, { 419760, 974592, 447150, 118596, 91308, 41387, 22908, 2668, 391 } }, { { 383385, 922488, 436095, 116541, 94977, 139067, 23148, 2668, 391 }, { 414810, 971584, 447150, 118356, 99266, 41387, 23148, 2668, 391 } }, { { 382470, 922488, 436095, 116301, 95892, 139066, 23388, 2668, 392 }, { 413820, 971584, 447150, 118116, 100256, 41386, 23388, 2668, 392 } }, { { 387045, 925344, 436095, 116061, 88461, 139110, 23628, 2668, 348 }, { 418770, 974592, 447150, 117876, 92298, 41430, 23628, 2668, 348 } }, { { 391620, 928200, 436095, 115821, 81030, 139154, 23868, 2668, 304 }, { 423720, 977600, 447150, 117636, 84340, 41474, 23868, 2668, 304 } }, { { 396195, 931056, 436095, 115581, 73599, 139198, 24108, 2668, 260 }, { 428670, 980608, 447150, 117396, 76382, 41518, 24108, 2668, 260 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 433620, 983616, 447150, 117156, 68424, 41518, 24348, 2668, 260 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 418770, 965568, 444440, 119242, 104604, 41474, 21690, 2668, 304 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 403920, 947520, 441730, 118412, 140784, 41430, 21948, 2668, 348 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 757350, 743904, 365336, 127824, 41386, 64720, 17848, 392 } }, { { 355020, 879648, 428166, 115560, 175794, 135238, 22446, 2668, 4220 }, { 384120, 926464, 439020, 117342, 184922, 41342, 22446, 2668, 436 } }, { { 350445, 876792, 428166, 115320, 183225, 136229, 22686, 2668, 3229 }, { 379170, 923456, 439020, 117102, 192880, 41343, 22686, 2668, 435 } }, { { 365085, 893928, 430809, 115641, 148245, 137175, 22926, 2668, 2283 }, { 395010, 941504, 441730, 117434, 155710, 41343, 22926, 2668, 435 } }, { { 374235, 908208, 433452, 115962, 121611, 138121, 23166, 2668, 1337 }, { 404910, 956544, 444440, 117766, 127488, 41343, 23166, 2668, 435 } }, { { 383385, 922488, 436095, 116283, 94977, 139067, 23406, 2668, 391 }, { 414810, 971584, 447150, 118098, 99266, 41343, 23406, 2668, 435 } }, { { 377895, 919632, 436095, 116043, 103323, 139022, 23646, 2668, 436 }, { 408870, 968576, 447150, 117858, 108214, 41342, 23646, 2668, 436 } }, { { 382470, 922488, 436095, 115803, 95892, 139066, 23886, 2668, 392 }, { 413820, 971584, 447150, 117618, 100256, 41386, 23886, 2668, 392 } }, { { 387045, 925344, 436095, 115563, 88461, 139110, 24126, 2668, 348 }, { 418770, 974592, 447150, 117378, 92298, 41430, 24126, 2668, 348 } }, { { 391620, 928200, 436095, 115323, 81030, 139154, 24366, 2668, 304 }, { 423720, 977600, 447150, 117138, 84340, 41474, 24366, 2668, 304 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 428670, 980608, 447150, 116898, 76382, 41474, 24606, 2668, 304 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 413820, 962560, 444440, 119002, 112562, 41430, 21930, 2668, 348 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 398970, 944512, 441730, 118172, 148742, 41386, 22188, 2668, 392 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 384120, 926464, 439020, 117342, 184922, 41342, 22446, 2668, 436 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 751410, 742392, 357358, 135782, 41298, 72192, 17848, 480 } }, { { 336720, 859656, 425523, 114501, 217290, 135239, 22944, 2668, 4219 }, { 364320, 905408, 436310, 116272, 229060, 41299, 22944, 2668, 479 } }, { { 351360, 876792, 428166, 114822, 182310, 136185, 23184, 2668, 3273 }, { 380160, 923456, 439020, 116604, 191890, 41299, 23184, 2668, 479 } }, { { 360510, 891072, 430809, 115143, 155676, 137131, 23424, 2668, 2327 }, { 390060, 938496, 441730, 116936, 163668, 41299, 23424, 2668, 479 } }, { { 369660, 905352, 433452, 115464, 129042, 138077, 23664, 2668, 1381 }, { 399960, 953536, 444440, 117268, 135446, 41299, 23664, 2668, 479 } }, { { 377895, 919632, 436095, 115785, 103323, 139022, 23904, 2668, 436 }, { 408870, 968576, 447150, 117600, 108214, 41298, 23904, 2668, 480 } }, { { 377895, 919632, 436095, 115545, 103323, 139022, 24144, 2668, 436 }, { 408870, 968576, 447150, 117360, 108214, 41342, 24144, 2668, 436 } }, { { 382470, 922488, 436095, 115305, 95892, 139066, 24384, 2668, 392 }, { 413820, 971584, 447150, 117120, 100256, 41386, 24384, 2668, 392 } }, { { 387045, 925344, 436095, 115065, 88461, 139110, 24624, 2668, 348 }, { 418770, 974592, 447150, 116880, 92298, 41430, 24624, 2668, 348 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 423720, 977600, 447150, 116640, 84340, 41430, 24864, 2668, 348 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 408870, 959552, 444440, 118762, 120520, 41431, 22170, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 394020, 941504, 441730, 117932, 156700, 41387, 22428, 2668, 391 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 379170, 923456, 439020, 117102, 192880, 41343, 22686, 2668, 435 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 364320, 905408, 436310, 116272, 229060, 41299, 22944, 2668, 479 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 745470, 740880, 349428, 143740, 41300, 79616, 17848, 478 } }, { { 337635, 859656, 425523, 114003, 216375, 135240, 23442, 2668, 4218 }, { 365310, 905408, 436310, 115774, 228070, 41300, 23442, 2668, 478 } }, { { 346785, 873936, 428166, 114324, 189741, 136186, 23682, 2668, 3272 }, { 375210, 920448, 439020, 116106, 199848, 41300, 23682, 2668, 478 } }, { { 355935, 888216, 430809, 114645, 163107, 137132, 23922, 2668, 2326 }, { 385110, 935488, 441730, 116438, 171626, 41300, 23922, 2668, 478 } }, { { 364170, 902496, 433452, 114966, 137388, 138077, 24162, 2668, 1381 }, { 394020, 950528, 444440, 116770, 144394, 41299, 24162, 2668, 479 } }, { { 377895, 919632, 436095, 115287, 103323, 139067, 24402, 2668, 391 }, { 408870, 968576, 447150, 117102, 108214, 41343, 24402, 2668, 435 } }, { { 377895, 919632, 436095, 115047, 103323, 139067, 24642, 2668, 391 }, { 408870, 968576, 447150, 116862, 108214, 41387, 24642, 2668, 391 } }, { { 382470, 922488, 436095, 114807, 95892, 139111, 24882, 2668, 347 }, { 413820, 971584, 447150, 116622, 100256, 41431, 24882, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 418770, 974592, 447150, 116382, 92298, 41431, 25122, 2668, 347 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 424710, 977600, 447150, 119094, 83350, 41431, 22410, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 409860, 959552, 444440, 118264, 119530, 41387, 22668, 2668, 391 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 395010, 941504, 441730, 117434, 155710, 41343, 22926, 2668, 435 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 380160, 923456, 439020, 116604, 191890, 41299, 23184, 2668, 479 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 365310, 905408, 436310, 115774, 228070, 41300, 23442, 2668, 478 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 746460, 740880, 342052, 142750, 41300, 86992, 17848, 478 } }, { { 338550, 859656, 425523, 113505, 215460, 135240, 23940, 2668, 4218 }, { 366300, 905408, 436310, 115276, 227080, 41300, 23940, 2668, 478 } }, { { 347700, 873936, 428166, 113826, 188826, 136186, 24180, 2668, 3272 }, { 376200, 920448, 439020, 115608, 198858, 41300, 24180, 2668, 478 } }, { { 355935, 888216, 430809, 114147, 163107, 137131, 24420, 2668, 2327 }, { 385110, 935488, 441730, 115940, 171626, 41299, 24420, 2668, 479 } }, { { 369660, 905352, 433452, 114468, 129042, 138121, 24660, 2668, 1337 }, { 399960, 953536, 444440, 116272, 135446, 41343, 24660, 2668, 435 } }, { { 383385, 922488, 436095, 114789, 94977, 139111, 24900, 2668, 347 }, { 414810, 971584, 447150, 116604, 99266, 41387, 24900, 2668, 391 } }, { { 383385, 922488, 436095, 114549, 94977, 139111, 25140, 2668, 347 }, { 414810, 971584, 447150, 116364, 99266, 41431, 25140, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 419760, 974592, 447150, 116124, 91308, 41431, 25380, 2668, 347 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 419760, 974592, 447150, 118854, 91308, 41431, 22650, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 419760, 974592, 447150, 118596, 91308, 41387, 22908, 2668, 391 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 404910, 956544, 444440, 117766, 127488, 41343, 23166, 2668, 435 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 390060, 938496, 441730, 116936, 163668, 41299, 23424, 2668, 479 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 375210, 920448, 439020, 116106, 199848, 41300, 23682, 2668, 478 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 366300, 905408, 436310, 115276, 227080, 41300, 23940, 2668, 478 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 746460, 740880, 334724, 142750, 41300, 94320, 17848, 478 } }, { { 338550, 859656, 425523, 113007, 215460, 135240, 24438, 2668, 4218 }, { 366300, 905408, 436310, 114778, 227080, 41300, 24438, 2668, 478 } }, { { 346785, 873936, 428166, 113328, 189741, 136185, 24678, 2668, 3273 }, { 375210, 920448, 439020, 115110, 199848, 41299, 24678, 2668, 479 } }, { { 360510, 891072, 430809, 113649, 155676, 137175, 24918, 2668, 2283 }, { 390060, 938496, 441730, 115442, 163668, 41343, 24918, 2668, 435 } }, { { 374235, 908208, 433452, 113970, 121611, 138165, 25158, 2668, 1293 }, { 404910, 956544, 444440, 115774, 127488, 41387, 25158, 2668, 391 } }, { { 387960, 925344, 436095, 114291, 87546, 139155, 25398, 2668, 303 }, { 419760, 974592, 447150, 116106, 91308, 41431, 25398, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 419760, 974592, 447150, 115866, 91308, 41431, 25638, 2668, 347 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 419760, 974592, 447150, 118614, 91308, 41431, 22890, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 414810, 971584, 447150, 118356, 99266, 41387, 23148, 2668, 391 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 414810, 971584, 447150, 118098, 99266, 41343, 23406, 2668, 435 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 399960, 953536, 444440, 117268, 135446, 41299, 23664, 2668, 479 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 385110, 935488, 441730, 116438, 171626, 41300, 23922, 2668, 478 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 376200, 920448, 439020, 115608, 198858, 41300, 24180, 2668, 478 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 366300, 905408, 436310, 114778, 227080, 41300, 24438, 2668, 478 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 746460, 740880, 327444, 142750, 41300, 101600, 17848, 478 } }, { { 337635, 859656, 425523, 112509, 216375, 135239, 24936, 2668, 4219 }, { 365310, 905408, 436310, 114280, 228070, 41299, 24936, 2668, 479 } }, { { 351360, 876792, 428166, 112830, 182310, 136229, 25176, 2668, 3229 }, { 380160, 923456, 439020, 114612, 191890, 41343, 25176, 2668, 435 } }, { { 365085, 893928, 430809, 113151, 148245, 137219, 25416, 2668, 2239 }, { 395010, 941504, 441730, 114944, 155710, 41387, 25416, 2668, 391 } }, { { 378810, 911064, 433452, 113472, 114180, 138209, 25656, 2668, 1249 }, { 409860, 959552, 444440, 115276, 119530, 41431, 25656, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 424710, 977600, 447150, 115608, 83350, 41431, 25896, 2668, 347 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 418770, 974592, 447150, 118374, 92298, 41430, 23130, 2668, 348 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 413820, 971584, 447150, 118116, 100256, 41386, 23388, 2668, 392 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 408870, 968576, 447150, 117858, 108214, 41342, 23646, 2668, 436 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 408870, 968576, 447150, 117600, 108214, 41298, 23904, 2668, 480 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 394020, 950528, 444440, 116770, 144394, 41299, 24162, 2668, 479 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 385110, 935488, 441730, 115940, 171626, 41299, 24420, 2668, 479 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 375210, 920448, 439020, 115110, 199848, 41299, 24678, 2668, 479 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 365310, 905408, 436310, 114280, 228070, 41299, 24936, 2668, 479 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 745470, 740880, 320212, 143740, 41298, 108832, 17848, 480 } }, { { 336720, 859656, 425523, 112011, 217290, 135238, 25434, 2668, 4220 }, { 364320, 905408, 436310, 113782, 229060, 41342, 25434, 2668, 436 } }, { { 350445, 876792, 428166, 112332, 183225, 136228, 25674, 2668, 3230 }, { 379170, 923456, 439020, 114114, 192880, 41386, 25674, 2668, 392 } }, { { 364170, 893928, 430809, 112653, 149160, 137218, 25914, 2668, 2240 }, { 394020, 941504, 441730, 114446, 156700, 41430, 25914, 2668, 348 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 408870, 959552, 444440, 114778, 120520, 41430, 26154, 2668, 348 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 423720, 977600, 447150, 118134, 84340, 41474, 23370, 2668, 304 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 418770, 974592, 447150, 117876, 92298, 41430, 23628, 2668, 348 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 413820, 971584, 447150, 117618, 100256, 41386, 23886, 2668, 392 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 408870, 968576, 447150, 117360, 108214, 41342, 24144, 2668, 436 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 408870, 968576, 447150, 117102, 108214, 41343, 24402, 2668, 435 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 399960, 953536, 444440, 116272, 135446, 41343, 24660, 2668, 435 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 390060, 938496, 441730, 115442, 163668, 41343, 24918, 2668, 435 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 380160, 923456, 439020, 114612, 191890, 41343, 25176, 2668, 435 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 364320, 905408, 436310, 113782, 229060, 41342, 25434, 2668, 436 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 751410, 742392, 313534, 135782, 41386, 116016, 17848, 392 } }, { { 355020, 879648, 428166, 112074, 175794, 136272, 25932, 2668, 3186 }, { 384120, 926464, 439020, 113856, 184922, 41430, 25932, 2668, 348 } }, { { 368745, 896784, 430809, 112395, 141729, 137262, 26172, 2668, 2196 }, { 398970, 944512, 441730, 114188, 148742, 41474, 26172, 2668, 304 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 413820, 962560, 444440, 114520, 112562, 41474, 26412, 2668, 304 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 428670, 980608, 447150, 117894, 76382, 41518, 23610, 2668, 260 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 423720, 977600, 447150, 117636, 84340, 41474, 23868, 2668, 304 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 418770, 974592, 447150, 117378, 92298, 41430, 24126, 2668, 348 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 413820, 971584, 447150, 117120, 100256, 41386, 24384, 2668, 392 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 408870, 968576, 447150, 116862, 108214, 41387, 24642, 2668, 391 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 414810, 971584, 447150, 116604, 99266, 41387, 24900, 2668, 391 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 404910, 956544, 444440, 115774, 127488, 41387, 25158, 2668, 391 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 395010, 941504, 441730, 114944, 155710, 41387, 25416, 2668, 391 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 379170, 923456, 439020, 114114, 192880, 41386, 25674, 2668, 392 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 384120, 926464, 439020, 113856, 184922, 41430, 25932, 2668, 348 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 757350, 743904, 306904, 127824, 41474, 123152, 17848, 304 } }, { { 373320, 899640, 430809, 112137, 134298, 137306, 26430, 2668, 2152 }, { 403920, 947520, 441730, 113930, 140784, 41518, 26430, 2668, 260 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 418770, 965568, 444440, 114262, 104604, 41518, 26670, 2668, 260 } } }, { { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 433620, 983616, 447150, 117654, 68424, 41562, 23850, 2668, 216 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 428670, 980608, 447150, 117396, 76382, 41518, 24108, 2668, 260 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 423720, 977600, 447150, 117138, 84340, 41474, 24366, 2668, 304 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 418770, 974592, 447150, 116880, 92298, 41430, 24624, 2668, 348 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 413820, 971584, 447150, 116622, 100256, 41431, 24882, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 414810, 971584, 447150, 116364, 99266, 41431, 25140, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 419760, 974592, 447150, 116106, 91308, 41431, 25398, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 409860, 959552, 444440, 115276, 119530, 41431, 25656, 2668, 347 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 394020, 941504, 441730, 114446, 156700, 41430, 25914, 2668, 348 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 398970, 944512, 441730, 114188, 148742, 41474, 26172, 2668, 304 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 403920, 947520, 441730, 113930, 140784, 41518, 26430, 2668, 260 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 763290, 745416, 300322, 119866, 41562, 130240, 17848, 216 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 423720, 968576, 444440, 114004, 96646, 41562, 26928, 2668, 216 } } }, { { { 405345, 936768, 436095, 115599, 58737, 138296, 24090, 2668, 1162 }, { 438570, 986624, 447150, 117414, 60466, 41562, 24090, 2668, 216 } }, { { 400770, 933912, 436095, 115341, 66168, 138252, 24348, 2668, 1206 }, { 433620, 983616, 447150, 117156, 68424, 41518, 24348, 2668, 260 } }, { { 396195, 931056, 436095, 115083, 73599, 138208, 24606, 2668, 1250 }, { 428670, 980608, 447150, 116898, 76382, 41474, 24606, 2668, 304 } }, { { 391620, 928200, 436095, 114825, 81030, 138164, 24864, 2668, 1294 }, { 423720, 977600, 447150, 116640, 84340, 41430, 24864, 2668, 348 } }, { { 387045, 925344, 436095, 114567, 88461, 139155, 25122, 2668, 303 }, { 418770, 974592, 447150, 116382, 92298, 41431, 25122, 2668, 347 } }, { { 387960, 925344, 436095, 114309, 87546, 139111, 25380, 2668, 347 }, { 419760, 974592, 447150, 116124, 91308, 41431, 25380, 2668, 347 } }, { { 387960, 925344, 436095, 114051, 87546, 139111, 25638, 2668, 347 }, { 419760, 974592, 447150, 115866, 91308, 41431, 25638, 2668, 347 } }, { { 392535, 928200, 436095, 113793, 80115, 139155, 25896, 2668, 303 }, { 424710, 977600, 447150, 115608, 83350, 41431, 25896, 2668, 347 } }, { { 377895, 911064, 433452, 112974, 115095, 138164, 26154, 2668, 1294 }, { 408870, 959552, 444440, 114778, 120520, 41430, 26154, 2668, 348 } }, { { 382470, 913920, 433452, 112716, 107664, 138208, 26412, 2668, 1250 }, { 413820, 962560, 444440, 114520, 112562, 41474, 26412, 2668, 304 } }, { { 387045, 916776, 433452, 112458, 100233, 138252, 26670, 2668, 1206 }, { 418770, 965568, 444440, 114262, 104604, 41518, 26670, 2668, 260 } }, { { 391620, 919632, 433452, 112200, 92802, 138296, 26928, 2668, 1162 }, { 423720, 968576, 444440, 114004, 96646, 41562, 26928, 2668, 216 } }, { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 769230, 746928, 293788, 111908, 41562, 137280, 17848, 216 } } } };  //possible hands for preflop 
        #endregion

        // initialize and update
        #region
        void Start()
        {
            setAlltoBlanck();
            setInitialCanvas();
            audioSource = bgmcontrol.GetComponent<AudioSource>();
            loadingimage = loadingscreenPic.GetComponent<Image>();
        }
        void Update()
        {
            if (Input.GetMouseButtonDown(0))
            {
                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
                RaycastHit2D hit2d = Physics2D.Raycast((Vector2)ray.origin, (Vector2)ray.direction);
                if (hit2d)
                {
                    clickedGameObject = hit2d.transform.gameObject;
                    var rectTransformp = clickedGameObject.GetComponent<RectTransform>();
                    var rectTransformc = chosen.GetComponent<RectTransform>();
                    rectTransformc.localPosition = rectTransformp.localPosition;
                }
            }
            seconds += Time.deltaTime;
            if (seconds == 1000) seconds = 0;
            if (loadingscreen.activeSelf)
            {
                if ((int)seconds % 4 == 0) loadingtext.text = "So many possible hands...";
                else if ((int)seconds % 4 == 1) loadingtext.text = "Ace = strong...";
                else if ((int)seconds % 4 == 2) loadingtext.text = "nCr=n!/(r!*(n-r)!)";
                else if ((int)seconds % 4 == 3) loadingtext.text = "my calculation may take up to 10 seconds...";
                if ((int)seconds % 6 == 0 || (int)seconds % 6 == 1) loadingimage.sprite = loadingpics[0];
                else if ((int)seconds % 6 == 2 || (int)seconds % 6 == 3) loadingimage.sprite = loadingpics[1];
                else if ((int)seconds % 6 == 4 || (int)seconds % 6 == 5) loadingimage.sprite = loadingpics[2];

                //loadingAnimation.Play();
            }
            /*if (Input.GetKey(KeyCode.Space))
            {
                StartCoroutine("load");
            }*/
        }

        public void setAlltoBlanck()
        {
            atext = hand1.GetComponentInChildren<Text>();
            atext.text = "-";
            atext = hand2.GetComponentInChildren<Text>();
            atext.text = "-";
            atext = board1.GetComponentInChildren<Text>();
            atext.text = "-";
            atext = board2.GetComponentInChildren<Text>();
            atext.text = "-";
            atext = board3.GetComponentInChildren<Text>();
            atext.text = "-";
            atext = board4.GetComponentInChildren<Text>();
            atext.text = "-";
            atext = board5.GetComponentInChildren<Text>();
            atext.text = "-";

            aimage = hand1.GetComponentInChildren<Image>();
            aimage.sprite = sprites[0];
            aimage = hand2.GetComponentInChildren<Image>();
            aimage.sprite = sprites[0];
            aimage = board1.GetComponentInChildren<Image>();
            aimage.sprite = sprites[0];
            aimage = board2.GetComponentInChildren<Image>();
            aimage.sprite = sprites[0];
            aimage = board3.GetComponentInChildren<Image>();
            aimage.sprite = sprites[0];
            aimage = board4.GetComponentInChildren<Image>();
            aimage.sprite = sprites[0];
            aimage = board5.GetComponentInChildren<Image>();
            aimage.sprite = sprites[0];

            clickedGameObject = hand1;
            var rectTransformp = clickedGameObject.GetComponent<RectTransform>();
            var rectTransformc = chosen.GetComponent<RectTransform>();
            rectTransformc.localPosition = rectTransformp.localPosition;

        }
        public void setInitialCanvas()
        {
            canvas.SetActive(true);
            errorcanvas.SetActive(false);
            errorcanvas2.SetActive(false);
            mainresult.SetActive(false);
            int playerNumber = playerNumberScript.GetComponent<playernumber>().numberofPeople();
            Text playernumbertext = playerNumberScript.GetComponent<playernumber>().playernumbertext;
            playernumbertext.text = playerNumber.ToString();
        }
        #endregion]

        //particles
        #region    
        public void particleControl(double a)
        {
            emWhite = psWhite.emission;
            emRed = psRed.emission;
            emBlue = psBlue.emission;
            emGreen = psGreen.emission;
            object c = a;
            float b = System.Convert.ToSingle(a);
            if (b >= 50)
            {
                b /= 3;
                emWhite.rateOverTime = new ParticleSystem.MinMaxCurve(b);
                emRed.rateOverTime = new ParticleSystem.MinMaxCurve(b);
                emBlue.rateOverTime = new ParticleSystem.MinMaxCurve(b);
                emGreen.rateOverTime = new ParticleSystem.MinMaxCurve(b);
            }
        }
        #endregion

        //things with setting card to card number and symbol and reseting results 
        #region
        public void PutinMemory(int k1, int k2)
        {
            for (int j = k1; j < k2; j++)
            {
                cardno = j;
                if (cardno == 0) { clickedGameObject = hand1; }
                if (cardno == 1) { clickedGameObject = hand2; }
                if (cardno == 2) { clickedGameObject = board1; }
                if (cardno == 3) { clickedGameObject = board2; }
                if (cardno == 4) { clickedGameObject = board3; }
                if (cardno == 5) { clickedGameObject = board4; }
                if (cardno == 6) { clickedGameObject = board5; }

                bimage = clickedGameObject.GetComponentInChildren<Image>();
                for (int i = 1; i < 5; i++)
                {
                    if (bimage.sprite == sprites[i])
                    {
                        card[cardno] += 13 * (i - 1);
                        resultSmbl[i - 1]++;
                    }
                }
                btext = clickedGameObject.GetComponentInChildren<Text>();
                for (int i = 2; i < 10; i++)
                {
                    if (btext.text == i.ToString())
                    {
                        card[cardno] += i;
                        resultNo[i]++;
                    }
                }
                if (btext.text == "10")
                {
                    card[cardno] += 10;
                    resultNo[10]++;
                }
                if (btext.text == "J")
                {
                    card[cardno] += 11;
                    resultNo[11]++;
                }
                if (btext.text == "Q")
                {
                    card[cardno] += 12;
                    resultNo[12]++;
                }
                if (btext.text == "K")
                {
                    card[cardno] += 13;
                    resultNo[13]++;
                }
                if (btext.text == "A")
                {
                    card[cardno] += 1;
                    resultNo[1]++; resultNo[14]++;
                }
            }

        }
        public void PutinMemoryOpponent()
        {
            for (int j = 2; j < 7; j++)
            {
                cardno = j;
                if (cardno == 0) { clickedGameObject = hand1; }
                if (cardno == 1) { clickedGameObject = hand2; }
                if (cardno == 2) { clickedGameObject = board1; }
                if (cardno == 3) { clickedGameObject = board2; }
                if (cardno == 4) { clickedGameObject = board3; }
                if (cardno == 5) { clickedGameObject = board4; }
                if (cardno == 6) { clickedGameObject = board5; }

                bimage = clickedGameObject.GetComponentInChildren<Image>();
                for (int i = 1; i < 5; i++)
                {
                    if (bimage.sprite == sprites[i])
                    {
                        //card[cardno] += 13 * i;
                        resultSmbl[i - 1]++;
                    }
                }
                btext = clickedGameObject.GetComponentInChildren<Text>();
                for (int i = 2; i < 10; i++)
                {
                    if (btext.text == i.ToString())
                    {
                        //card[cardno] += i;
                        resultNo[i]++;
                    }
                }
                if (btext.text == "10")
                {
                    // card[cardno] += 10;
                    resultNo[10]++;
                }
                if (btext.text == "J")
                {
                    // card[cardno] += 11;
                    resultNo[11]++;
                }
                if (btext.text == "Q")
                {
                    // card[cardno] += 12;
                    resultNo[12]++;
                }
                if (btext.text == "K")
                {
                    //  card[cardno] += 13;
                    resultNo[13]++;
                }
                if (btext.text == "A")
                {
                    // card[cardno] += 1;
                    resultNo[1]++; resultNo[14]++;
                }
                //Debug.Log(card[cardno]);
            }
        }
        public void PutinMemoryMe(int k)
        {
            for (int j = 0; j < k; j++)
            {
                cardno = j;
                if (cardno == 0) { clickedGameObject = hand1; }
                if (cardno == 1) { clickedGameObject = hand2; }
                if (cardno == 2) { clickedGameObject = board1; }
                if (cardno == 3) { clickedGameObject = board2; }
                if (cardno == 4) { clickedGameObject = board3; }
                if (cardno == 5) { clickedGameObject = board4; }
                if (cardno == 6) { clickedGameObject = board5; }

                bimage = clickedGameObject.GetComponentInChildren<Image>();
                for (int i = 1; i < 5; i++)
                {
                    if (bimage.sprite == sprites[i])
                    {
                        //card[cardno] += 13 * i;
                        resultSmbl[i - 1]++;
                    }
                }
                btext = clickedGameObject.GetComponentInChildren<Text>();
                for (int i = 2; i < 10; i++)
                {
                    if (btext.text == i.ToString())
                    {
                        //card[cardno] += i;
                        resultNo[i]++;
                    }
                }
                if (btext.text == "10")
                {
                    // card[cardno] += 10;
                    resultNo[10]++;
                }
                if (btext.text == "J")
                {
                    // card[cardno] += 11;
                    resultNo[11]++;
                }
                if (btext.text == "Q")
                {
                    // card[cardno] += 12;
                    resultNo[12]++;
                }
                if (btext.text == "K")
                {
                    //  card[cardno] += 13;
                    resultNo[13]++;
                }
                if (btext.text == "A")
                {
                    // card[cardno] += 1;
                    resultNo[1]++; resultNo[14]++;
                }
                //Debug.Log(card[cardno]);
            }
        }
        public void ClearMemory()
        {
            for (int i = 0; i < 7; i++)
            {
                card[i] = 0;
            }
            myscore = 0;
            opscore = 0;
            numberOfDraws = 0;
            numberOpponentWinningHands = 0;
            for (int i = 0; i < 9; i++)
            {
                myhandcount[i] = 0;
            }
            for (int i = 0; i < 15; i++)
            {
                resultNo[i] = 0;
            }
            for (int i = 0; i < 4; i++)
            {
                resultSmbl[i] = 0;
            }
        }
        public void resetForOpponentCalculation()
        {
            for (int i = 0; i <= 14; i++)
            {
                resultNo[i] = 0;
            }
            for (int i = 0; i < 4; i++)
            {
                resultSmbl[i] = 0;
            }
        }
        public int countCardsinPlay()
        {
            int knowncardno = 0;
            for (int i = 0; i < 7; i++)
            {
                if (card[i] != 0)
                {
                    knowncardno++;
                }
            }
            return knowncardno;
        }
        #endregion

        //get card number or symbol method or set result number
        #region
        public int getCardNumber(int a)
        {
            int cardnumber;
            if (a % 13 == 0) { cardnumber = 13; }
            else if (a % 13 == 1) { cardnumber = 14; }
            else { cardnumber = a % 13; }
            return cardnumber;
        }
        public int getSymbl(int a)
        {
            if (a == 52) return 3;
            else if (a == 39) return 2;
            else if (a == 26) return 1;
            else if (a == 13) return 0;
            else return a / 13;             // 1-12 is 0, 14-25 is 1,,,40-51 is 3 
        }
        public void setResultNumber(int a)
        {
            if (a % 13 == 0) { resultNo[13]++; }
            else if (a % 13 == 1) { resultNo[14]++; resultNo[1]++; }
            else { resultNo[a % 13]++; }
        }
        public void resetResultNumber(int a)
        {
            if (a % 13 == 0) { resultNo[13]--; }
            else if (a % 13 == 1) { resultNo[14]--; resultNo[1]--; }
            else { resultNo[a % 13]--; }
        }
        public void setSymblandNumber(int a, int b)
        {
            setResultNumber(a);
            card[b] = a;
            resultSmbl[getSymbl(a)]++;
        }
        public void resetSymblandNumber(int a, int b)
        {
            resetResultNumber(a);
            card[b] = 0;
            resultSmbl[getSymbl(a)]--;
        }
        public void gethandNumberandSymbolForPreflop()
        {
            smallercardnumber = min(card[0], card[1]);
            biggercardnumber = max(card[0], card[1]);
            hand1number = getCardNumber(smallercardnumber);
            hand2number = getCardNumber(biggercardnumber);
            hand1symbol = getSymbl(card[0]);
            hand2symbol = getSymbl(card[1]);
            if (hand1symbol == hand2symbol) handsymbol = 0;
            else handsymbol = 1;
        }
        #endregion

        //buttons
        #region
        public void NextCard()
        {
            current_image = clickedGameObject.GetComponentInChildren<Image>();
            curret_text = clickedGameObject.GetComponentInChildren<Text>();


            if (current_image.sprite != sprites[0] && curret_text.text != "-")
            {
                if (clickedGameObject == hand1) { clickedGameObject = hand2; }
                else if (clickedGameObject == hand2) { clickedGameObject = board1; }
                else if (clickedGameObject == board1) { clickedGameObject = board2; }
                else if (clickedGameObject == board2) { clickedGameObject = board3; }
                else if (clickedGameObject == board3) { clickedGameObject = board4; }
                else if (clickedGameObject == board4) { clickedGameObject = board5; }
                var rectTransformp = clickedGameObject.GetComponent<RectTransform>();
                var rectTransformc = chosen.GetComponent<RectTransform>();
                rectTransformc.localPosition = rectTransformp.localPosition;

            }
        }
        public void bgmonoff()
        {
            Button btn = bgmcontrolbutton.GetComponent<Button>();
            Image img = bgmcontrolbuttonbackground.GetComponent<Image>();
            if (onoff == 0)
            { 
                audioSource.Stop();
                onoff++;
                btn.image.color = new Color(100f / 255f, 100f / 255f, 100f / 255f);
                img.color = new Color(100f / 255f, 100f / 255f, 100f / 255f);
            }
            else
            { 
                audioSource.Play();
                onoff = 0;
                btn.image.color = new Color(255f / 255f, 255f / 255f, 255f / 255f);
                img.color = new Color(255f / 255f, 255f / 255f, 255f / 255f);
            }

        }
        public void clickUp()
        {
            playerNumberScript.GetComponent<playernumber>().addPeople();
        }
        public void clickDown()
        {
            playerNumberScript.GetComponent<playernumber>().subtractPeople();
        }
        public void Spade()
        {
            aimage = clickedGameObject.GetComponentInChildren<Image>();
            aimage.sprite = sprites[1];
            NextCard();


        }
        public void Diamond()
        {
            aimage = clickedGameObject.GetComponentInChildren<Image>();
            aimage.sprite = sprites[2];
            NextCard();

        }

        public void Clover()
        {
            aimage = clickedGameObject.GetComponentInChildren<Image>();
            aimage.sprite = sprites[3];
            NextCard();

        }
        public void Heart()
        {
            aimage = clickedGameObject.GetComponentInChildren<Image>();
            aimage.sprite = sprites[4];
            NextCard();

        }
        public void Erase()
        {
            aimage = clickedGameObject.GetComponentInChildren<Image>();
            aimage.sprite = sprites[0];
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "-";
            NextCard();

        }
        public void Click2()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "2";
            NextCard();

        }
        public void Click3()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "3";
            NextCard();

        }
        public void Click4()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "4";
            NextCard();

        }
        public void Click5()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "5";
            NextCard();

        }
        public void Click6()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "6";
            NextCard();

        }
        public void Click7()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "7";
            NextCard();

        }
        public void Click8()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "8";
            NextCard();

        }
        public void Click9()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "9";
            NextCard();

        }
        public void Click10()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "10";
            NextCard();

        }
        public void ClickJ()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "J";
            NextCard();

        }
        public void ClickQ()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "Q";
            NextCard();

        }
        public void ClickK()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "K";
            NextCard();

        }
        public void ClickA()
        {
            atext = clickedGameObject.GetComponentInChildren<Text>();
            atext.text = "A";
            NextCard();

        }
        public void ClickOKerror()
        {
            if (errorcanvas2.activeSelf == false)
            {
                canvas.SetActive(true);
            }
            errorcanvas.SetActive(false);
        }
        public void ClickOKerror2()
        {
            if (errorcanvas.activeSelf == false)
            {
                canvas.SetActive(true);
            }
            errorcanvas2.SetActive(false);
        }
        public void ClickOKmainresult()
        {
            canvas.SetActive(true);
            mainresult.SetActive(false);
        }
        public void ClickOKpreflopresult()
        {
            canvas.SetActive(true);
            preflopresult.SetActive(false);
        }
        public void clickWhat()
        {
            notcalculatedmessage.SetActive(true);
            canvas.SetActive(false);
        }
        public void clickokWhat()
        {
            canvas.SetActive(true);
            notcalculatedmessage.SetActive(false);
        }
        #endregion //buttons

        // math calculation methods
        #region
        public int Computation(int a, int b)
        {
            int ctmp = 1;
            for (int i = a; i > a - b; i--)
            {
                ctmp *= i; Debug.Log(i);
            }

            ctmp /= Factorial(b);
            return ctmp;
        }
        public int Factorial(int c)
        {
            int tmp = 1;
            int k = c;
            while (k >= 1)
            {
                tmp *= k;
                k--;
            }
            return tmp;
        }
        public int max(int a, int b)
        {
            if (a >= b) return a;
            else return b;
        }
        public int min(int a, int b)
        {
            if (a <= b) return a;
            else return b;
        }
        #endregion

        // hand scoring version3 my and op
        #region
        public int myscoreStraightflush()
        {
            int score = 0;
            int[] cardnumber = new int[7];
            int[] resultSmblStraightFlush = new int[4];

            for (int i = 0; i < 7; i++) //01 23456
            {
                cardnumber[i] = card[i];
            }
            Array.Sort(cardnumber);
            for (int n = 0; n < 4; n++)
            {
                if (cardnumber.Contains(1 + n * 13) && cardnumber.Contains(10 + n * 13) && cardnumber.Contains(11 + n * 13) && cardnumber.Contains(12 + n * 13) && cardnumber.Contains(13 + n * 13))
                {
                    score += 800000000;
                    score += 14 * 1000000;
                    break;
                }
            }
            if (score < 100000000)
            {
                for (int i = 2; i >= 0; i--)
                {
                    if (cardnumber[i + 1] == cardnumber[i] + 1 && cardnumber[i + 2] == cardnumber[i] + 2 && cardnumber[i + 3] == cardnumber[i] + 3 && cardnumber[i + 4] == cardnumber[i] + 4)
                    {
                        for (int k = 0; k < 4; k++)
                        {
                            resultSmblStraightFlush[k] = 0;
                        }
                        resultSmblStraightFlush[getSymbl(cardnumber[i])]++;
                        resultSmblStraightFlush[getSymbl(cardnumber[i + 4])]++;
                        for (int j = 0; j < 4; j++)
                        {
                            // Debug.Log("i" + i + "j" + j+"symbl"+resultSmblStraightFlush[j]);
                            if (resultSmblStraightFlush[j] == 2)
                            {
                                score += 800000000;
                                score += getCardNumber(cardnumber[i + 4]) * 1000000;
                                break;
                            }
                        }
                        if (score > 100000000) break;
                    }
                }
            }
            return score;
        }
        public int myscoreFour()
        {
            int score = 0;
            int fourNum = 0;
            int[] number = new int[7];

            for (int i = 14; i >= 2; i--)
            {
                if (resultNo[i] == 4)
                {
                    score += 700000000;
                    score += i * 1000000;
                    fourNum = i;
                    break;
                }
            }
            for (int i = 0; i < 7; i++)
            {
                number[i] = getCardNumber(card[i]);
                if (number[i] == fourNum) number[i] = 0;
            }
            Array.Sort(number);
            score += number[6] * 10000;
            return score;
        }
        public int myscoreFullhouse()
        {
            int score = 0;
            int k2 = 0;
            int k3 = 0;

            for (int i = 14; i >= 2; i--)
            {
                if (resultNo[i] >= 2 && k2 != 1 && k3 == 1)
                {
                    score += i * 10000;
                    k2++;
                }
                if (resultNo[i] == 3 && k3 != 1)
                {
                    score += i * 1000000;
                    k3++;
                }
            }
            if (k2 > 0 && k3 > 0) { score += 600000000; }
            return score;
        }
        public int myscoreFlush()
        {
            int score = 0;
            int[] cardnumber = new int[7];
            int[] resultSmblFlush = new int[4];

            for (int i = 0; i < 7; i++)
            {
                cardnumber[i] = card[i];
            }
            Array.Sort(cardnumber);
            for (int i = 6; i >= 0; i--)
            {
                resultSmblFlush[getSymbl(cardnumber[i])]++;
                for (int j = 0; j < 4; j++)
                {
                    if (resultSmblFlush[j] >= 5)
                    {
                        score += 500000000;
                        score += getCardNumber(cardnumber[i + 4]) * 1000000;
                        break;
                    }
                }
                if (score > 100000000) break;

            }
            return score;
        }
        public int myscoreStraight()
        {
            int score = 0;

            for (int i = 10; i >= 2; i--)
            {

                if (resultNo[i] > 0 && resultNo[i + 1] > 0 && resultNo[i + 2] > 0 && resultNo[i + 3] > 0 && resultNo[i + 4] > 0)
                {
                    score += 400000000;
                    score += (5 * i + 10) * 1000000;
                    break;
                }
            }
            return score;
        }
        public int myscoreThree()
        {
            int score = 0;
            int threeNum = 0;
            int[] number = new int[7];

            for (int i = 14; i >= 2; i--)
            {
                if (resultNo[i] == 3)
                {
                    score += 300000000;
                    score += i * 1000000;
                    threeNum = i;
                    break;
                }
            }
            for (int i = 0; i < 7; i++)
            {
                number[i] = getCardNumber(card[i]);
                if (number[i] == threeNum) number[i] = 0;
            }
            Array.Sort(number);
            score += number[6] * 10000 + number[5] * 100;
            return score;
        }
        public int myscoreTwopair()
        {
            int score = 0;
            int pairNum = 0;
            int pairNum2 = 0;
            int[] number = new int[7];
            int j = 0;

            for (int i = 14; i >= 2; i--)
            {
                if (resultNo[i] == 2 && j != 1)
                {
                    score += i * 1000000;
                    pairNum = i;
                    j = 1;
                }
                else if (resultNo[i] == 2 && j == 1)
                {
                    score += 200000000;
                    score += i * 10000;
                    pairNum2 = i;
                }
            }
            for (int i = 0; i < 7; i++)
            {
                number[i] = getCardNumber(card[i]);
                if (number[i] == pairNum || number[i] == pairNum2) number[i] = 0;
            }
            Array.Sort(number);
            score += number[6] * 100;
            return score;
        }
        public int myscorePair()
        {
            int score = 0;
            int pairNum = 0;
            int[] number = new int[7];

            for (int i = 14; i >= 2; i--)
            {
                if (resultNo[i] == 2)
                {
                    score += 100000000;
                    score += i * 1000000;
                    pairNum = i;
                    break;
                }
            }
            for (int i = 0; i < 7; i++)
            {
                number[i] = getCardNumber(card[i]);
                if (number[i] == pairNum) number[i] = 0;
            }
            Array.Sort(number);
            score += number[6] * 10000 + number[5] * 100 + number[4];
            return score;
        }
        public int myscoreHighcard()
        {
            int score = max(getCardNumber(card[0]), getCardNumber(card[1])) * 100 + min(getCardNumber(card[0]), getCardNumber(card[1]));
            return score;
        }

        public int opscoreStraightflush()
        {
            int score = 0;
            int[] cardnumber = new int[9];
            int[] resultSmblStraightFlush = new int[4];

            for (int i = 2; i < 9; i++) //23456 78
            {
                cardnumber[i] = card[i];
            }
            Array.Sort(cardnumber);
            for (int n = 0; n < 4; n++)
            {
                if (cardnumber.Contains(1 + n * 13) && cardnumber.Contains(10 + n * 13) && cardnumber.Contains(11 + n * 13) && cardnumber.Contains(12 + n * 13) && cardnumber.Contains(13 + n * 13))
                {
                    score += 800000000;
                    score += 14 * 1000000;
                    break;
                }
            }
            if (score < 100000000)
            {
                for (int i = 4; i >= 2; i--)
                {
                    if (cardnumber[i + 1] == cardnumber[i] + 1 && cardnumber[i + 2] == cardnumber[i] + 2 && cardnumber[i + 3] == cardnumber[i] + 3 && cardnumber[i + 4] == cardnumber[i] + 4)
                    {
                        for (int k = 0; k < 4; k++)
                        {
                            resultSmblStraightFlush[k] = 0;
                        }
                        resultSmblStraightFlush[getSymbl(cardnumber[i])]++;
                        resultSmblStraightFlush[getSymbl(cardnumber[i + 4])]++;
                        for (int j = 0; j < 4; j++)
                        {
                            // Debug.Log("i" + i + "j" + j+"symbl"+resultSmblStraightFlush[j]);
                            if (resultSmblStraightFlush[j] == 2)
                            {
                                score += 800000000;
                                score += getCardNumber(cardnumber[i + 4]) * 1000000;
                                break;
                            }
                        }
                        if (score > 100000000) break;
                    }
                }
            }
            return score;
        }
        public int opscoreFour()
        {
            int score = 0;
            int fourNum = 0;
            int[] number = new int[9];

            for (int i = 14; i >= 2; i--)
            {
                if (resultNo[i] == 4)
                {
                    score += 700000000;
                    score += i * 1000000;
                    fourNum = i;
                    break;
                }
            }
            for (int i = 2; i < 9; i++)
            {
                number[i] = getCardNumber(card[i]);
                if (number[i] == fourNum) number[i] = 0;
            }
            Array.Sort(number);
            score += number[8] * 10000;
            return score;
        }
        public int opscoreFullhouse()
        {
            int score = 0;
            int k2 = 0;
            int k3 = 0;

            for (int i = 14; i >= 2; i--)
            {
                if (resultNo[i] >= 2 && k2 != 1 && k3 == 1)
                {
                    score += i * 10000;
                    k2++;
                }
                if (resultNo[i] == 3 && k3 != 1)
                {
                    score += i * 1000000;
                    k3++;
                }
            }
            if (k2 > 0 && k3 > 0) { score += 600000000; }
            return score;
        }
        public int opscoreFlush()
        {
            int score = 0;
            int[] cardnumber = new int[9];
            int[] resultSmblFlush = new int[4];

            for (int i = 2; i < 9; i++)
            {
                cardnumber[i] = card[i];
            }
            Array.Sort(cardnumber);
            for (int i = 8; i >= 2; i--)
            {
                resultSmblFlush[getSymbl(cardnumber[i])]++;

                for (int j = 0; j < 4; j++)
                {
                    if (resultSmblFlush[j] >= 5)
                    {
                        score += 500000000;
                        score += getCardNumber(cardnumber[i + 4]) * 1000000;
                        break;
                    }
                }
                if (score > 100000000) break;

            }
            return score;
        }
        public int opscoreStraight()
        {
            int score = 0;

            for (int i = 10; i >= 2; i--)
            {

                if (resultNo[i] > 0 && resultNo[i + 1] > 0 && resultNo[i + 2] > 0 && resultNo[i + 3] > 0 && resultNo[i + 4] > 0)
                {
                    score += 400000000;
                    score += (5 * i + 10) * 1000000;
                    break;
                }
            }
            return score;
        }
        public int opscoreThree()
        {
            int score = 0;
            int threeNum = 0;
            int[] number = new int[9];

            for (int i = 14; i >= 2; i--)
            {
                if (resultNo[i] == 3)
                {
                    score += 300000000;
                    score += i * 1000000;
                    threeNum = i;
                    break;
                }
            }
            for (int i = 2; i < 9; i++)
            {
                number[i] = getCardNumber(card[i]);
                if (number[i] == threeNum) number[i] = 0;
            }
            Array.Sort(number);
            score += number[8] * 10000 + number[7] * 100;
            return score;
        }
        public int opscoreTwopair()
        {
            int score = 0;
            int pairNum = 0;
            int pairNum2 = 0;
            int[] number = new int[9];
            int j = 0;

            for (int i = 14; i >= 2; i--)
            {
                if (resultNo[i] == 2 && j != 1)
                {
                    score += i * 1000000;
                    pairNum = i;
                    j = 1;
                }
                else if (resultNo[i] == 2 && j == 1)
                {
                    score += 200000000;
                    score += i * 10000;
                    pairNum2 = i;
                }
            }
            for (int i = 2; i < 9; i++)
            {
                number[i] = getCardNumber(card[i]);
                if (number[i] == pairNum || number[i] == pairNum2) number[i] = 0;
            }
            Array.Sort(number);
            score += number[8] * 100;
            return score;
        }
        public int opscorePair()
        {
            int score = 0;
            int pairNum = 0;
            int[] number = new int[9];

            for (int i = 14; i >= 2; i--)
            {
                if (resultNo[i] == 2)
                {
                    score += 100000000;
                    score += i * 1000000;
                    pairNum = i;
                    break;
                }
            }
            for (int i = 2; i < 9; i++)
            {
                number[i] = getCardNumber(card[i]);
                if (number[i] == pairNum) number[i] = 0;
            }
            Array.Sort(number);
            score += number[8] * 10000 + number[7] * 100 + number[6];
            return score;
        }
        public int opscoreHighcard()
        {
            int score = max(getCardNumber(card[7]), getCardNumber(card[8])) * 100 + min(getCardNumber(card[7]), getCardNumber(card[8]));
            return score;
        }
        #endregion

        //my hand score and opponent hand score possible opponent hands
        #region
        public int myhandscore()
        {
            int myhandscorenumber = myscoreStraightflush();
            if (myhandscorenumber > 100000000) { return myhandscorenumber; }
            myhandscorenumber = myscoreFour();
            if (myhandscorenumber > 100000000) { return myhandscorenumber; }
            myhandscorenumber = myscoreFullhouse();
            if (myhandscorenumber > 100000000) { return myhandscorenumber; }
            myhandscorenumber = myscoreFlush();
            if (myhandscorenumber > 100000000) { return myhandscorenumber; }
            myhandscorenumber = myscoreStraight();
            if (myhandscorenumber > 100000000) { return myhandscorenumber; }
            myhandscorenumber = myscoreThree();
            if (myhandscorenumber > 100000000) { return myhandscorenumber; }
            myhandscorenumber = myscoreTwopair();
            if (myhandscorenumber > 100000000) { return myhandscorenumber; }
            myhandscorenumber = myscorePair();
            if (myhandscorenumber > 100000000) { return myhandscorenumber; }
            return myscoreHighcard();
        }
        public int ophandscore(int myscore)
        {
            int myhandscoreno = myscore;
            myhandscoreno /= 100000000;
            if (myhandscoreno > 7)
            {
                int ophandscorenumber = opscoreStraightflush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                else return 0;
            }
            else if (myhandscoreno > 6)
            {
                int ophandscorenumber = opscoreStraightflush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFour();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                else return 0;
            }
            else if (myhandscoreno > 5)
            {
                int ophandscorenumber = opscoreStraightflush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFour();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFullhouse();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                else return 0;
            }
            else if (myhandscoreno > 4)
            {
                int ophandscorenumber = opscoreStraightflush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFour();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFullhouse();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFlush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                else return 0;
            }
            else if (myhandscoreno > 3)
            {
                int ophandscorenumber = opscoreStraightflush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFour();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFullhouse();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFlush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreStraight();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                else return 0;
            }
            else if (myhandscoreno > 2)
            {
                int ophandscorenumber = opscoreStraightflush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFour();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFullhouse();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFlush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreStraight();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreThree();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                else return 0;
            }
            else if (myhandscoreno > 1)
            {
                int ophandscorenumber = opscoreStraightflush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFour();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFullhouse();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFlush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreStraight();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreThree();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreTwopair();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                else return 0;
            }
            else if (myhandscoreno > 0)
            {
                int ophandscorenumber = opscoreStraightflush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFour();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFullhouse();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFlush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreStraight();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreThree();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreTwopair();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscorePair();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                else return 0;
            }
            else
            {
                int ophandscorenumber = opscoreStraightflush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFour();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFullhouse();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreFlush();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreStraight();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreThree();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscoreTwopair();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                ophandscorenumber = opscorePair();
                if (ophandscorenumber > 100000000) { return ophandscorenumber; }
                return opscoreHighcard();
            }
        }
        public void possibleOpponenthands(int a)
        {
            for (int i = a + 1; i <= 52; i++)
            {
                if (i != card[0] && i != card[1] && i != card[2] && i != card[3] && i != card[4] && i != card[5] && i != card[6])
                {
                    setResultNumber(i);
                    card[7] = i;
                    resultSmbl[getSymbl(i)]++;
                    for (int j = i + 1; j <= 52; j++)
                    {
                        if (j != card[0] && j != card[1] && j != card[2] && j != card[3] && j != card[4] && j != card[5] && j != card[6])
                        {
                            setResultNumber(j);
                            card[8] = j;
                            resultSmbl[getSymbl(j)]++;

                            opscore = ophandscore(myscore);            //get opponent hand score and compare with my hand score
                            if (opscore > myscore) { numberOpponentWinningHands++; /*Debug.Log(i + " " + j + " " + opscore);*/ }
                            else if (opscore == myscore) numberOfDraws++;

                            resetResultNumber(j);
                            card[8] = 0;
                            resultSmbl[getSymbl(j)]--;
                        }
                    }
                    resetResultNumber(i);
                    card[7] = 0;
                    resultSmbl[getSymbl(i)]--;
                }
            }
        }
        #endregion

        //put in result screen
        #region
        public void setMainResult(int abc)
        {
            double opwinhand = numberOpponentWinningHands;
            double draws = numberOfDraws;
            double mydraw;
            double mywin = 0;
            double mylose;
            int playerNumber = playerNumberScript.GetComponent<playernumber>().numberofPeople();
            Text text;
            if (abc == 7) //(52-7)C2=990 
            {
                //my winning chance
                mywin = (990 - opwinhand - draws) / 990;
                mywin = Math.Pow(mywin, (playerNumber - 1)) * 100;
                text = mywinningChance.GetComponent<Text>();
                text.text = mywin.ToString("f3") + "%";
                text = oplosingChance.GetComponent<Text>();
                text.text = mywin.ToString("f3") + "%";
                //tie
                mydraw = draws / 990;
                mydraw = Math.Pow(mydraw, (playerNumber - 1)) * 100;
                text = mytieChance.GetComponent<Text>();
                text.text = mydraw.ToString("f3") + "%";
                text = optieChance.GetComponent<Text>();
                text.text = mydraw.ToString("f3") + "%";
                //my losing chance
                mylose = 100 - mywin - mydraw;
                text = mylosingChance.GetComponent<Text>();
                text.text = mylose.ToString("f3") + "%";
                text = opwinningChance.GetComponent<Text>();
                text.text = mylose.ToString("f3") + "%";
            }
            else if (abc == 6) //(52-6)C3=15180
            {
                //my winning chance
                mywin = (15180 - opwinhand - draws) / 15180;
                mywin = Math.Pow(mywin, (playerNumber - 1)) * 100;
                text = mywinningChance.GetComponent<Text>();
                text.text = mywin.ToString("f3") + "%";
                text = oplosingChance.GetComponent<Text>();
                text.text = mywin.ToString("f3") + "%";
                //tie
                mydraw = draws / 15180;
                mydraw = Math.Pow(mydraw, (playerNumber - 1)) * 100;
                text = mytieChance.GetComponent<Text>();
                text.text = mydraw.ToString("f3") + "%";
                text = optieChance.GetComponent<Text>();
                text.text = mydraw.ToString("f3") + "%";
                //my losing chance
                mylose = 100 - mywin - mydraw;
                text = mylosingChance.GetComponent<Text>();
                text.text = mylose.ToString("f3") + "%";
                text = opwinningChance.GetComponent<Text>();
                text.text = mylose.ToString("f3") + "%";
            }
            else if (abc == 5) //(52-5)C4=178,365 
            {
                //my winning chance
                mywin = (178365 - opwinhand - draws) / 178365;
                mywin = Math.Pow(mywin, (playerNumber - 1)) * 100;
                text = mywinningChance.GetComponent<Text>();
                text.text = mywin.ToString("f3") + "%";
                text = oplosingChance.GetComponent<Text>();
                text.text = mywin.ToString("f3") + "%";
                //tie
                mydraw = draws / 178365;
                mydraw = Math.Pow(mydraw, (playerNumber - 1)) * 100;
                text = mytieChance.GetComponent<Text>();
                text.text = mydraw.ToString("f3") + "%";
                text = optieChance.GetComponent<Text>();
                text.text = mydraw.ToString("f3") + "%";
                //my losing chance
                mylose = 100 - mywin - mydraw;
                text = mylosingChance.GetComponent<Text>();
                text.text = mylose.ToString("f3") + "%";
                text = opwinningChance.GetComponent<Text>();
                text.text = mylose.ToString("f3") + "%";
            }
            canvas.SetActive(false);
            mainresult.SetActive(true);
            particleControl(mywin);
        }
        public void setResultpreflop(int hand1number, int hand2number, int handsymbol)
        {
            double[] avpossibility = { 0.031, 0.168, 2.596, 3.025, 4.619, 4.830, 23.495, 43.823, 17.412 };
            double higherThanPair=0;
            double avscore=0;
            double myscoretest=0;
            double accumulatedavposiibility=0;
            for (int i = 0; i < 9; i++)
            {
                myhandcount[8 - i] = possibleHands[hand1number - 2, hand2number - 2, handsymbol, 8 - i];
                prefloptexts[2 * i].text = myhandcount[8 - i].ToString();
                prefloptexts[2 * i + 1].text = (myhandcount[8 - i] / 21187.6).ToString("f3") + "%";
                if (myhandcount[8 - i] / 21187.6 > avpossibility[i] * 1.5)
                {
                    //prefloptexts[2 * i].color = new Color(154f / 255f, 255f / 255f, 0f / 255f);
                    prefloptexts[2 * i + 1].color = new Color(154f / 255f, 255f / 255f, 0f / 255f);
                    prefloptexts[2 * i + 1].fontSize = 70;
                }
                else if (myhandcount[8 - i]/21187.6 > avpossibility[i] * 1.05)
                {
                    //prefloptexts[2 * i].color = new Color(154f / 255f, 255f / 255f, 0f / 255f);
                    prefloptexts[2 * i + 1].color = new Color(154f / 255f, 255f / 255f, 0f / 255f);
                    prefloptexts[2 * i + 1].fontSize = 50;

                }
                else if (myhandcount[8 - i] / 21187.6 < avpossibility[i] * 0.95)
                {
                   // prefloptexts[2 * i].color = new Color(255f / 255f, 40f / 255f, 0f / 255f);
                    prefloptexts[2 * i + 1].fontSize = 50;
                   prefloptexts[2 * i + 1].color = new Color(255f / 255f, 40f / 255f, 0f / 255f);
                }
                else
                {
                   // prefloptexts[2 * i].color = new Color(255f / 255f, 255f / 255f, 255f / 255f);
                    prefloptexts[2 * i + 1].fontSize = 50;
                    prefloptexts[2 * i + 1].color = new Color(255f / 255f, 255f / 255f, 255f / 255f);
                }
                if(i<7) higherThanPair += myhandcount[8 - i];
                accumulatedavposiibility += avpossibility[i];
                myscoretest += (myhandcount[8 - i] / 21187.6) * (100 - accumulatedavposiibility);
                avscore += avpossibility[i] * (100 - accumulatedavposiibility);
            }
            Debug.Log(myscoretest);
            Debug.Log(avscore);
            higherThanPair /= 21187.6;
            higherThanPair /= 0.38765;
                prefloptexts[18].text = "Chance of getting Two Pair or better\n " + higherThanPair.ToString("f2") + "% higher than average."; 
            canvas.SetActive(false);
            preflopresult.SetActive(true);
        }
        #endregion

        //loading screen
        #region
        public void startLoading()
        {
            canvas.SetActive(false);
            loadingscreen.SetActive(true);

            loadingtextTriviatext.text = loadingtextTrivia[(int)seconds % loadingtextTrivia.Length];
        }
        public void endLoading()
        {
            loadingscreen.SetActive(false);
        }
        IEnumerator load()
        {
            startLoading();
            yield return new WaitForSeconds(0.5f);
            calculationFor5cards();
        }
        public void calculationFor5cards()
        {
            for (int p = 1; p <= 52; p++)
            {
                if (p != card[0] && p != card[1] && p != card[2] && p != card[3] && p != card[4])
                {
                    card[5] = p;
                    calculateAfterFlop(p);
                }
            }
            endLoading();
            setMainResult(5);
            clickedGameObject = board4;
        }
        #endregion

        //calculation after river aka 5 cards on board, turn aka 4, flop aka 3 , preflop aka 2cards
        #region
        public void calculateAfterRiver()
        {
            //PutinMemory();
            myscore = myhandscore(); Debug.Log("myscore" + myhandscore());
            resetForOpponentCalculation();
            PutinMemoryOpponent();
            // all possible hands for opponent
            possibleOpponenthands(0);

        }
        public void calculateAfterTurn(int a)
        {
            resetForOpponentCalculation();
            PutinMemoryMe(6);
            resultSmbl[getSymbl(a)]++;
            setResultNumber(a);
            myscore = myhandscore();// Debug.Log("myscore" + myhandscore());
            resetForOpponentCalculation();
            PutinMemoryOpponent();
            resultSmbl[getSymbl(a)]++;
            setResultNumber(a);
            // all possible hands for opponent
            possibleOpponenthands(a);

        }
        public void calculateAfterFlop(int a)
        {
            for (int k = a + 1; k <= 52; k++)
            {
                if (k != card[0] && k != card[1] && k != card[2] && k != card[3] && k != card[4] && k != card[5])
                {
                    card[6] = k;

                    resetForOpponentCalculation();
                    PutinMemoryMe(5);
                    resultSmbl[getSymbl(k)]++;
                    resultSmbl[getSymbl(a)]++;
                    setResultNumber(k);
                    setResultNumber(a);
                    myscore = myhandscore(); //Debug.Log("myscore" + myhandscore());
                    resetForOpponentCalculation();
                    PutinMemoryOpponent();
                    resultSmbl[getSymbl(k)]++;
                    resultSmbl[getSymbl(a)]++;
                    setResultNumber(k);
                    setResultNumber(a);
                    // all possible hands for opponent
                    possibleOpponenthands(k);

                    resetResultNumber(k);
                    card[6] = 0;
                    resultSmbl[getSymbl(k)]--;
                }
            }
        }
        public void countmyhands()
        {
            myscore = myhandscore();
            for (int i = 8; i >= 0; i--)
            {
                if (myscore > i * 100000000) { myhandcount[i]++; break; }
            }
        }
        #endregion

        //error check for input
        #region
        public bool checkInputError()
        {
            for (int i = 0; i < 6; i++)
            {
                if (card[i] == 0) { continue; }
                for (int j = i + 1; j < 7; j++)
                {
                    if (card[i] == card[j])
                    {
                        canvas.SetActive(false);
                        errorcanvas.SetActive(true);
                        return true;
                    }
                }
            }
            for (int j = 0; j < 7; j++)
            {
                cardno = j;
                if (cardno == 0) { clickedGameObject = hand1; }
                if (cardno == 1) { clickedGameObject = hand2; }
                if (cardno == 2) { clickedGameObject = board1; }
                if (cardno == 3) { clickedGameObject = board2; }
                if (cardno == 4) { clickedGameObject = board3; }
                if (cardno == 5) { clickedGameObject = board4; }
                if (cardno == 6) { clickedGameObject = board5; }

                bimage = clickedGameObject.GetComponentInChildren<Image>();
                btext = clickedGameObject.GetComponentInChildren<Text>();

                if (bimage.sprite == sprites[0] && btext.text != "-")
                {
                    canvas.SetActive(false);
                    errorcanvas2.SetActive(true);
                    return true;
                }
                if (bimage.sprite != sprites[0] && btext.text == "-")
                {
                    canvas.SetActive(false);
                    errorcanvas2.SetActive(true);
                    return true;
                }
            }
            return false;
        }
        #endregion

        public void Calculate()
        {
            ClearMemory();
            PutinMemory(0, 7);
            if (!checkInputError())
            {
                if (countCardsinPlay() == 7)       //after river
                {
                    calculateAfterRiver();
                    setMainResult(7);
                }
                else if (card[0] != 0 && card[1] != 0 && card[2] != 0 && card[3] != 0 && card[4] != 0 && card[5] != 0 && countCardsinPlay() == 6)  //after turn
                {
                    for (int k = 1; k <= 52; k++)
                    {
                        if (k != card[0] && k != card[1] && k != card[2] && k != card[3] && k != card[4] && k != card[5])
                        {
                            card[6] = k;
                            calculateAfterTurn(k);
                        }
                    }
                    setMainResult(6);
                }
                else if (card[0] != 0 && card[1] != 0 && card[2] != 0 && card[3] != 0 && card[4] != 0 && countCardsinPlay() == 5)  //after flop
                {
                    StartCoroutine("load");
                }
                else if (countCardsinPlay() == 4)
                {
                    canvas.SetActive(false);
                    errorcanvas2.SetActive(true);
                    clickedGameObject = board3;
                }
                else if (countCardsinPlay() == 3)
                {
                    canvas.SetActive(false);
                    errorcanvas2.SetActive(true);
                    clickedGameObject = board2;
                }
                else if (countCardsinPlay() == 1)
                {
                    canvas.SetActive(false);
                    errorcanvas2.SetActive(true);
                    clickedGameObject = hand1;
                }
                else if (countCardsinPlay() == 2 && card[0] != 0 && card[1] != 0)
                {
                    gethandNumberandSymbolForPreflop();
                    setResultpreflop(hand1number, hand2number, handsymbol);
                    clickedGameObject = board1;
                }
                Debug.Log("number of opponent winning hand " + numberOpponentWinningHands);

            }
        }
    }

}






