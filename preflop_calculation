using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using System.Linq;

public class momorize : MonoBehaviour
{
    Text atext;                            // initial text also used after input
    Text btext;                            // text after input 
    Image aimage;                          //initial image also used after inout
    Image bimage;                          //image after input
    Image current_image;                   //for moving to next card
    Text curret_text;                      //for moving to next card
    Sprite asprite;                        //initial sprite
    int[] card = new int[9];                //check which cards are used     ace of spade is 1, 2 of spade is 2,,,, 3 of diamond is (3+13)=16,,,,
    int[] resultNo = new int[15];           // (1 is resultNo[1], will use for 12345 srtaight) , 2 is resultNo[2],,,13 is resultNo[13],1is also resultNo[14], 
    int[] resultSmbl = new int[4];          //0 is Spades, 1 is Diamonds, 2 is Clubs, 3 is Hearts
    int[] myhandcount = new int[9];        //number of each hand
    int cardno;                            //number of card hand1 is 1, hand2 is 2, board1 is 3,,,,,opponent1 is 7, opponent2 is 8 
    int myscore = 0;                        //scoring my hand for comparison ex.pair is 100000
    int opscore = 0;                        //same but for opponent
    int numberOpponentWinningHands = 0;    //number of hands the opponent won
    int numberOfDraws = 0;                 //number of same hands
    int playerNumber = 2;                  //player number
    public Text text;
    int[,,,] possibleHands = new int[15, 15,2, 9]; //possible hands for preflop 
    int hand1symbl;
    int hand1number;
    int hand2symbl;
    int hand2number;
    int handsymble;
    string ans;
    int cnt = 0;

    // Start is called before the first frame update
    void Start()
    {
        memorization();
    }

    // Update is called once per frame
    void Update()
    {

    }
    #region
    public int Computation(int a, int b)
    {
        int ctmp = 1;
        for (int i = a; i > a - b; i--)
        {
            ctmp *= i; Debug.Log(i);
        }

        ctmp /= Factorial(b);
        return ctmp;
    }
    public int Factorial(int c)
    {
        int tmp = 1;
        int k = c;
        while (k >= 1)
        {
            tmp *= k;
            k--;
        }
        return tmp;
    }
    public int max(int a, int b)
    {
        if (a >= b) return a;
        else return b;
    }
    public int min(int a, int b)
    {
        if (a <= b) return a;
        else return b;
    }
    #endregion

    #region
    public int myscoreStraightflush()
    {
        int score = 0;
        int[] cardnumber = new int[7];
        int[] resultSmblStraightFlush = new int[4];

        for (int i = 0; i < 7; i++)
        {
            cardnumber[i] = card[i];
        }
        Array.Sort(cardnumber);

        for (int i = 2; i >= 0; i--)
        {
            if (cardnumber[i + 1] == cardnumber[i] + 1 && cardnumber[i + 2] == cardnumber[i] + 2 && cardnumber[i + 3] == cardnumber[i] + 3 && cardnumber[i + 4] == cardnumber[i] + 4)
            {
                for (int k = 0; k < 4; k++)
                {
                    resultSmblStraightFlush[k] = 0;
                }
                resultSmblStraightFlush[getSymbl(cardnumber[i])]++;
                resultSmblStraightFlush[getSymbl(cardnumber[i + 4])]++;
                for (int j = 0; j < 4; j++)
                {
                    // Debug.Log("i" + i + "j" + j+"symbl"+resultSmblStraightFlush[j]);
                    if (resultSmblStraightFlush[j] == 2)
                    {
                        score += 800000000;
                        score += getCardNumber(cardnumber[i + 4]) * 1000000;
                        break;
                    }
                }
                if (score > 100000000) break;
            }
        }
        if (score < 100000000)
        {
            for (int n = 0; n < 4; n++)
            {
                if (cardnumber.Contains(1 + n * 13) && cardnumber.Contains(10 + n * 13) && cardnumber.Contains(11 + n * 13) && cardnumber.Contains(12 + n * 13) && cardnumber.Contains(13 + n * 13))
                {
                    score += 800000000;
                    score += 14 * 1000000;
                    break;
                }
            }
        }
        return score;
    }
    public int myscoreFour()
    {
        int score = 0;
        int fourNum = 0;
        int[] number = new int[7];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 4)
            {
                score += 700000000;
                score += i * 1000000;
                fourNum = i;
                break;
            }
        }
        for (int i = 0; i < 7; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == fourNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000;
        return score;
    }
    public int myscoreFullhouse()
    {
        int score = 0;
        int k2 = 0;
        int k3 = 0;

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] >= 2 && k2 != 1 && k3 == 1)
            {
                score += i * 10000;
                k2++;
            }
            if (resultNo[i] == 3 && k3 != 1)
            {
                score += i * 1000000;
                k3++;
            }
        }
        if (k2 > 0 && k3 > 0) { score += 600000000; }
        return score;
    }
    public int myscoreFlush()
    {
        int score = 0;
        int[] cardnumber = new int[7];
        int[] resultSmblFlush = new int[4];

        for (int i = 0; i < 7; i++)
        {
            cardnumber[i] = card[i];
        }
        Array.Sort(cardnumber);
        for (int i = 6; i >= 0; i--)
        {
            resultSmblFlush[getSymbl(cardnumber[i])]++;
            for (int j = 0; j < 4; j++)
            {
                if (resultSmblFlush[j] >= 5)
                {
                    score += 500000000;
                    score += getCardNumber(cardnumber[i + 4]) * 1000000;
                    break;
                }
            }
            if (score > 100000000) break;

        }
        return score;
    }
    public int myscoreStraight()
    {
        int score = 0;

        for (int i = 10; i >= 2; i--)
        {

            if (resultNo[i] > 0 && resultNo[i + 1] > 0 && resultNo[i + 2] > 0 && resultNo[i + 3] > 0 && resultNo[i + 4] > 0)
            {
                score += 400000000;
                score += (5 * i + 10) * 1000000;
                break;
            }
        }
        return score;
    }
    public int myscoreThree()
    {
        int score = 0;
        int threeNum = 0;
        int[] number = new int[7];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 3)
            {
                score += 300000000;
                score += i * 1000000;
                threeNum = i;
                break;
            }
        }
        for (int i = 0; i < 7; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == threeNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000 + number[5] * 100;
        return score;
    }
    public int myscoreTwopair()
    {
        int score = 0;
        int pairNum = 0;
        int pairNum2 = 0;
        int[] number = new int[7];
        int j = 0;

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 2 && j != 1)
            {
                score += i * 1000000;
                pairNum = i;
                j = 1;
            }
            else if (resultNo[i] == 2 && j == 1)
            {
                score += 200000000;
                score += i * 10000;
                pairNum2 = i;
            }
        }
        for (int i = 0; i < 7; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == pairNum || number[i] == pairNum2) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 100;
        return score;
    }
    public int myscorePair()
    {
        int score = 0;
        int pairNum = 0;
        int[] number = new int[7];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 2)
            {
                score += 100000000;
                score += i * 1000000;
                pairNum = i;
                break;
            }
        }
        for (int i = 0; i < 7; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == pairNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000 + number[5] * 100 + number[4];
        return score;
    }
    public int myscoreHighcard()
    {
        int score = max(getCardNumber(card[0]), getCardNumber(card[1])) * 100 + min(getCardNumber(card[0]), getCardNumber(card[1]));
        return score;
    }

    public int opscoreStraightflush()
    {
        int score = 0;
        int[] cardnumber = new int[9];
        int[] resultSmblStraightFlush = new int[4];

        for (int i = 2; i < 9; i++)
        {
            cardnumber[i] = card[i];
        }
        Array.Sort(cardnumber);

        for (int i = 4; i >= 2; i--)
        {
            if (cardnumber[i + 1] == cardnumber[i] + 1 && cardnumber[i + 2] == cardnumber[i] + 2 && cardnumber[i + 3] == cardnumber[i] + 3 && cardnumber[i + 4] == cardnumber[i] + 4)
            {
                for (int k = 0; k < 4; k++)
                {
                    resultSmblStraightFlush[k] = 0;
                }
                resultSmblStraightFlush[getSymbl(cardnumber[i])]++;
                resultSmblStraightFlush[getSymbl(cardnumber[i + 4])]++;
                for (int j = 0; j < 4; j++)
                {
                    // Debug.Log("i" + i + "j" + j+"symbl"+resultSmblStraightFlush[j]);
                    if (resultSmblStraightFlush[j] == 2)
                    {
                        score += 800000000;
                        score += getCardNumber(cardnumber[i + 4]) * 1000000;
                        break;
                    }
                }
                if (score > 100000000) break;
            }
        }
        if (score < 100000000)
        {
            for (int n = 0; n < 4; n++)
            {
                if (cardnumber.Contains(1 + n * 13) && cardnumber.Contains(10 + n * 13) && cardnumber.Contains(11 + n * 13) && cardnumber.Contains(12 + n * 13) && cardnumber.Contains(13 + n * 13))
                {
                    score += 800000000;
                    score += 14 * 1000000;
                    break;
                }
            }
        }
        return score;
    }
    public int opscoreFour()
    {
        int score = 0;
        int fourNum = 0;
        int[] number = new int[9];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 4)
            {
                score += 700000000;
                score += i * 1000000;
                fourNum = i;
                break;
            }
        }
        for (int i = 2; i < 9; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == fourNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000;
        return score;
    }
    public int opscoreFullhouse()
    {
        int score = 0;
        int k2 = 0;
        int k3 = 0;

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] >= 2 && k2 != 1 && k3 == 1)
            {
                score += i * 10000;
                k2++;
            }
            if (resultNo[i] == 3 && k3 != 1)
            {
                score += i * 1000000;
                k3++;
            }
        }
        if (k2 > 0 && k3 > 0) { score += 600000000; }
        return score;
    }
    public int opscoreFlush()
    {
        int score = 0;
        int[] cardnumber = new int[9];
        int[] resultSmblFlush = new int[4];

        for (int i = 2; i < 9; i++)
        {
            cardnumber[i] = card[i];
        }
        Array.Sort(cardnumber);
        for (int i = 8; i >= 2; i--)
        {
            resultSmblFlush[getSymbl(cardnumber[i])]++;

            for (int j = 0; j < 4; j++)
            {
                if (resultSmblFlush[j] >= 5)
                {
                    score += 500000000;
                    score += getCardNumber(cardnumber[i + 4]) * 1000000;
                    break;
                }
            }
            if (score > 100000000) break;

        }
        return score;
    }
    public int opscoreStraight()
    {
        int score = 0;

        for (int i = 10; i >= 2; i--)
        {

            if (resultNo[i] > 0 && resultNo[i + 1] > 0 && resultNo[i + 2] > 0 && resultNo[i + 3] > 0 && resultNo[i + 4] > 0)
            {
                score += 400000000;
                score += (5 * i + 10) * 1000000;
                break;
            }
        }
        return score;
    }
    public int opscoreThree()
    {
        int score = 0;
        int threeNum = 0;
        int[] number = new int[9];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 3)
            {
                score += 300000000;
                score += i * 1000000;
                threeNum = i;
                break;
            }
        }
        for (int i = 2; i < 9; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == threeNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000 + number[5] * 100;
        return score;
    }
    public int opscoreTwopair()
    {
        int score = 0;
        int pairNum = 0;
        int pairNum2 = 0;
        int[] number = new int[9];
        int j = 0;

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 2 && j != 1)
            {
                score += i * 1000000;
                pairNum = i;
                j = 1;
            }
            else if (resultNo[i] == 2 && j == 1)
            {
                score += 200000000;
                score += i * 10000;
                pairNum2 = i;
            }
        }
        for (int i = 2; i < 9; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == pairNum || number[i] == pairNum2) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 100;
        return score;
    }
    public int opscorePair()
    {
        int score = 0;
        int pairNum = 0;
        int[] number = new int[9];

        for (int i = 14; i >= 2; i--)
        {
            if (resultNo[i] == 2)
            {
                score += 100000000;
                score += i * 1000000;
                pairNum = i;
                break;
            }
        }
        for (int i = 2; i < 9; i++)
        {
            number[i] = getCardNumber(card[i]);
            if (number[i] == pairNum) number[i] = 0;
        }
        Array.Sort(number);
        score += number[6] * 10000 + number[5] * 100 + number[4];
        return score;
    }
    public int opscoreHighcard()
    {
        int score = max(getCardNumber(card[7]), getCardNumber(card[8])) * 100 + min(getCardNumber(card[7]), getCardNumber(card[8]));
        return score;
    }
    #endregion
    public void countmyhands()
    {
        myscore = myhandscore();
        for (int i = 8; i >= 0; i--)
        {
            if (myscore > i * 100000000) { myhandcount[i]++; break; }
        }
    }
    public void resetcountmyhand()
    {
        for (int i = 8; i >= 0; i--)
        {
            myhandcount[i] = 0;
        }
    }
    public int myhandscore()
    {
        int myhandscorenumber = myscoreStraightflush();
        if (myhandscorenumber > 100000000) { return myhandscorenumber; }
        myhandscorenumber = myscoreFour();
        if (myhandscorenumber > 100000000) { return myhandscorenumber; }
        myhandscorenumber = myscoreFullhouse();
        if (myhandscorenumber > 100000000) { return myhandscorenumber; }
        myhandscorenumber = myscoreFlush();
        if (myhandscorenumber > 100000000) { return myhandscorenumber; }
        myhandscorenumber = myscoreStraight();
        if (myhandscorenumber > 100000000) { return myhandscorenumber; }
        myhandscorenumber = myscoreThree();
        if (myhandscorenumber > 100000000) { return myhandscorenumber; }
        myhandscorenumber = myscoreTwopair();
        if (myhandscorenumber > 100000000) { return myhandscorenumber; }
        myhandscorenumber = myscorePair();
        if (myhandscorenumber > 100000000) { return myhandscorenumber; }
        return myscoreHighcard();
    }
    public int getCardNumber(int a)
    {
        int cardnumber;
        if (a % 13 == 0) { cardnumber = 13; }
        else if (a % 13 == 1) { cardnumber = 14; }
        else { cardnumber = a % 13; }
        return cardnumber;
    }
    public int getSymbl(int a)
    {
        if (a == 52) return 3;
        else if (a == 39) return 2;
        else if (a == 26) return 1;
        else if (a == 13) return 0;
        else return a / 13;             // 1-12 is 0, 14-25 is 1,,,40-51 is 3 
    }
    public void setResultNumber(int a)
    {
        if (a % 13 == 0) { resultNo[13]++; }
        else if (a % 13 == 1) { resultNo[14]++; resultNo[1]++; }
        else { resultNo[a % 13]++; }
    }
    public void resetResultNumber(int a)
    {
        if (a % 13 == 0) { resultNo[13]--; }
        else if (a % 13 == 1) { resultNo[14]--; resultNo[1]--; }
        else { resultNo[a % 13]--; }
    }
    public void setSymblandNumber(int a, int b)
    {
        setResultNumber(a);
        card[b] = a;
        resultSmbl[getSymbl(a)]++;
    }
    public void resetSymblandNumber(int a, int b)
    {
        resetResultNumber(a);
        card[b] = 0;
        resultSmbl[getSymbl(a)]--;
    }
    public void ClearMemory()
    {
        for (int i = 0; i < 7; i++)
        {
            card[i] = 0;
        }
        myscore = 0;
        opscore = 0;
        numberOfDraws = 0;
        numberOpponentWinningHands = 0;
        for (int i = 0; i < 9; i++)
        {
            myhandcount[i] = 0;
        }
        for (int i = 0; i < 15; i++)
        {
            resultNo[i] = 0;
        }
        for (int i = 0; i < 4; i++)
        {
            resultSmbl[i] = 0;
        }
    }
    public void writeinmemo()
    {

    }
    public void memorization()
    {
        for (int a1 = 1; a1 <= 52; a1++)  //////////aaaaaaa1111111111
        {
            
            
            for (int a2 = a1 + 1; a2 <= 52; a2++) ////aaaaaaaaaaaaaaaaaaaaa22222222222
            {
                hand1symbl = getSymbl(a1);
                hand1number = getCardNumber(a1);
                hand2symbl = getSymbl(a2);
                hand2number = getCardNumber(a2);
                if (a2 != a1 &&possibleHands[hand1number,hand2number,handsymble,1]==0)
                {
                    setSymblandNumber(a1, 0);
                    
                    setSymblandNumber(a2, 1);
                    
                    if (hand1symbl == hand2symbl) handsymble = 0;
                    else handsymble = 1;
                    for (int a = 1; a <= 52; a++)
                    {
                        if (a != a1 && a != a2)
                        {
                            setSymblandNumber(a, 2);
                            for (int b = a + 1; b <= 52; b++)
                            {
                                if (b != a1 && b != a2 && b != a)
                                {
                                    setSymblandNumber(b, 3);
                                    for (int c = b + 1; c <= 52; c++)
                                    {
                                        if (c != a1 && c != a2 && c != a && c != b)
                                        {
                                            setSymblandNumber(c, 4);
                                            for (int d = c + 1; d <= 52; d++)
                                            {
                                                if (d != a1 && d != a2 && d != a && d != b && d != c)
                                                {
                                                    setSymblandNumber(d, 5);
                                                    for (int e = d + 1; e <= 52; e++)
                                                    {
                                                        if (e != a1 && e != a2 && e != a && e != b && e != c && e != d)
                                                        {
                                                            setSymblandNumber(e, 6);

                                                            cnt++;
                                                            countmyhands();
                                                            for (int i = 0; i <= 8;i++) {
                                                                possibleHands[hand1number,hand2number,handsymble, i] = myhandcount[i];
                                                            }
                                                            
                                                            
                                                            resetSymblandNumber(e, 6);
                                                        }
                                                    }
                                                    resetSymblandNumber(d, 5);
                                                }
                                            }
                                            resetSymblandNumber(c, 4);
                                        }
                                    }
                                    resetSymblandNumber(b, 3);
                                }
                            }
                            resetSymblandNumber(a, 2);
                        }
                    }
                   // resetSymblandNumber(a2, 1);
                    Debug.Log(cnt + " " + hand1number + " " + hand1symbl + " " + hand2number + " " + hand2symbl);
                    ClearMemory();
                }
                
                
            }
            //resetSymblandNumber(a1, 0);

        }
        for(int i=2; i < 15; i++)
        {
            if(i==2)ans += "{";
            for(int j = 2; j < 15; j++)
            {
                if(j==2)ans += "{";

                for (int k = 0; k < 2; k++)
                {
                    if(k==0)ans += "{";

                    for (int m = 0; m < 9; m++)
                    {
                        if(m==0)ans += "{";
                        ans += possibleHands[i, j, k, m];
                        if (m < 8) ans += ",";
                        else if (m == 8&&k!=1) ans += "},";
                        else if (m == 8&&k==1) ans += "}";
                    }
                    //if (k == 0) ans += ",";
                    if(k==1&&j!=14)ans += "},";
                    else if(k==1&&j==14)ans += "}";
                }
                //if (j < 14) ans += ",";
                if(j==14&&i!=14)ans += "},";
                else if(j==14&&i==14)ans += "}";
            }
            //if(i<14)ans += ",";
            if (i == 14) ans += "}";
            text.text = ans;
        }
    }

}
